BIOS
      <text xml:space="preserve">{{About|the BIOS as found in IBM PC compatibles|the general concept|firmware|similar programs on non-PC systems|booting|other uses|Bios (disambiguation)}}

The '''BIOS''' ({{IPAc-en|ˈ|b|aɪ|.|ɒ|s}}, abbreviated from '''Basic Input/Output System''' and also known as the '''System BIOS''', '''ROM BIOS''' or '''PC BIOS''') is a type of [[firmware]] used during the [[booting]] process (power-on startup) on [[IBM PC compatible]] computers.&lt;ref name=&quot;pcguidedefinition&quot;/&gt; The BIOS firmware is built into PCs, and it is the first software they run when powered on. The name itself originates from the Basic Input/Output System used in the [[CP/M]] operating system in 1975.&lt;ref name=&quot;Kildall_1975_BDOS&quot;/&gt;&lt;ref name=&quot;Kildall_1980_CPM&quot;/&gt; Originally [[Proprietary software|proprietary]] to the IBM PC, the BIOS was [[reverse engineer]]ed by companies looking to create compatible systems and the [[Interface (computing)|interface]] of that original system serves as a ''[[De facto standard|de facto]]'' standard.

The fundamental purposes of the BIOS are to initialize and test the system hardware components, and to load a [[boot loader]] or an [[operating system]] from a mass memory device. The BIOS additionally provides an abstraction layer for the hardware, i.e. a consistent way for application programs and operating systems to interact with the keyboard, display, and other input/output devices. Variations in the system hardware are hidden by the BIOS from programs that use BIOS services instead of directly accessing the hardware. [[MS-DOS]] ([[PC DOS]]), which was the dominant PC operating system from the early 1980s until the mid 1990s, relied on BIOS services for disk, keyboard, and text display functions. MS [[Windows NT]], [[Linux]], and other [[protected mode]] operating systems in general ignore the abstraction layer provided by the BIOS and do not use it after loading, instead accessing the hardware components directly.

Every BIOS implementation is specifically designed to work with a particular computer or [[motherboard]] model, by interfacing with various devices that make up the complementary system [[chipset]]. Originally, BIOS firmware was stored in a [[Read-only memory|ROM]] chip on the PC motherboard; in modern computer systems, the BIOS contents are stored on [[flash memory]] so it can be rewritten without removing the chip from the motherboard. This allows easy updates to the BIOS firmware so new features can be added or bugs can be fixed, but it also creates a possibility for the computer to become infected with BIOS [[rootkit]]s.

[[Unified Extensible Firmware Interface]] (UEFI) was designed as a successor to BIOS, aiming to address its technical shortcomings.&lt;ref name=&quot;Bradley&quot;/&gt; {{as of|2014}}, new PC hardware predominantly ships with UEFI firmware.

== History ==
{{rquote|right|
&lt;pre&gt;/* C P / M   B A S I C   I / O    S Y S T E M    (B I O S)
                    COPYRIGHT (C) GARY A. KILDALL
                             JUNE, 1975 */
[...]
/*  B A S I C   D I S K    O P E R A T I N G   S Y S T E M  (B D O S)
                    COPYRIGHT (C) GARY A. KILDALL
                            JUNE, 1975 */&lt;/pre&gt;
&lt;!-- some whitespace removed from original citation --&gt;
| An excerpt from the BDOS.PLM file header in the [[PL/M]] source code of [[CP/M 1.1]] or [[CP/M 1.2]] for [[Lawrence Livermore Laboratories]] (LLL)&lt;ref name=&quot;Kildall_1975_BDOS&quot;/&gt;
}}

The term BIOS (Basic Input/Output System) was invented by [[Gary Kildall]]&lt;ref name=&quot;Swaine_1997_Entrepreneurship&quot;/&gt; and first appeared in the [[CP/M]] operating system in 1975,&lt;ref name=&quot;Kildall_1975_BDOS&quot;/&gt;&lt;ref name=&quot;Kildall_1980_CPM&quot;/&gt;&lt;ref name=&quot;Fischer_2001_Ewing&quot;/&gt;&lt;ref name=&quot;Fraley_2007_Killian&quot;/&gt; describing the machine-specific part of CP/M loaded during boot time that interfaces directly with the [[computer hardware|hardware]].&lt;ref name=&quot;Kildall_1980_CPM&quot;/&gt; (A CP/M machine usually has only a simple [[boot loader]] in its ROM.)

Versions of [[MS-DOS]], [[PC DOS]] or [[DR-DOS]] contain a file called variously &quot;[[IO.SYS]]&quot;, &quot;[[IBMBIO.COM]]&quot;, &quot;IBMBIO.SYS&quot;, or &quot;[[DRBIOS.SYS]]&quot;; this file is known as the &quot;[[DOS&amp;nbsp;BIOS]]&quot; (aka &quot;[[DOS I/O System]]&quot;) and contains the lower-level hardware-specific part of the operating system. Together with the underlying hardware-specific, but operating system-independent &quot;System BIOS&quot;, which resides in ROM, it represents the analogous to the &quot;[[CP/M BIOS]]&quot;.

With the introduction of PS/2 machines, IBM divided the System BIOS into real-mode and protected mode portions. The real-mode portion was meant to provide backward-compatibility with existing operating systems such as DOS, and therefore was named &quot;CBIOS&quot; (for Compatibility BIOS), whereas the &quot;ABIOS&quot; (for Advanced BIOS) provided new interfaces specifically suited for multitasking operating systems such as [[OS/2]].

== {{Anchor|BCU}}User interface ==
{{rquote|right|
The first commercial licensing of [[CP/M]] took place in 1975 with contracts between [[Digital Systems (Seattle)|Digital Systems]]&lt;!-- a company by [[John Torode (physicist)|John Torode]] --&gt; and [[Omron of America]] for use in their intelligent terminal, and with [[Lawrence Livermore Laboratories]] where CP/M was used to monitor programs in the [[Octopus (network)|Octopus network]]. Little attention was paid to CP/M for about a year. In my spare time, I worked to improve overall facilities [...] By this time, CP/M had been adapted for four different controllers. [...] In 1976, [[Glenn Ewing]] approached me with a problem: [[IMSAI|Imsai]], Incorporated, for whom Glenn consulted, had shipped a large number of disk subsystems with a promise that an operating system would follow. I was somewhat reluctant to adapt CP/M to yet another controller, and thus the notion of a separated Basic I/O System (BIOS) evolved. In principle, the hardware dependent portions of CP/M were concentrated in the BIOS, thus allowing Glenn, or anyone else, to adapt CP/M to the Imsai equipment. Imsai was subsequently licensed to distribute [[CP/M 1.3|CP/M version 1.3]] which eventually evolved into an operating system called [[IMDOS]].
| Gary Kildall&lt;ref name=&quot;Kildall_1980_CPM&quot;/&gt;
}}

The BIOS of the original [[IBM PC XT]] had no interactive user interface. Error codes or messages were displayed on the screen, or coded series of sounds were generated to signal errors (when the POST had not proceeded to the point of successfully initializing a video display adapter). Options on the [[IBM Personal Computer|PC]] and XT were set by switches and jumpers on the main board and on peripheral cards. Starting around the mid-1990s, it became typical for the BIOS ROM to include a ''&quot;BIOS configuration utility&quot;'' (BCU&lt;ref&gt;{{cite web
 | url = http://ftp.hp.com/pub/caps-softpaq/cmit/HP_BCU.html
 | title = HP BIOS Configuration Utility
 | year = 2013 | accessdate = 2015-01-12
 | publisher = [[Hewlett-Packard]]
}}&lt;/ref&gt;) or &quot;BIOS setup utility&quot;, accessed at system power-up by a particular key sequence.  This program allowed the user to set system configuration options, of the type formerly set using DIP switches, through an interactive menu system controlled through the keyboard.  In the interim period, IBM-compatible PCs{{mdashb}}including the IBM AT{{mdashb}}held configuration settings in battery-backed RAM and used a bootable configuration program on disk, not in the ROM, to set the configuration options contained in this memory.  The disk was supplied with the computer, and if it was lost the system settings could not be changed.

A modern [[Wintel]]-compatible computer provides a setup routine essentially unchanged in nature from the ROM-resident BIOS setup utilities of the late 1990s; the user can configure hardware options using the keyboard and video display.  Also, when errors occur at boot time, a modern BIOS usually displays user-friendly error messages, often presented as pop-up boxes in a [[Text-based user interface|TUI]] style, and offers to enter the BIOS setup utility or to ignore the error and proceed if possible.  Instead of battery-backed RAM, the modern Wintel machine may store the BIOS configuration settings in flash ROM, perhaps the same flash ROM that holds the BIOS itself.

== Operation ==
{{rquote|right|
When [[IMSAI|we]] failed to produce an operating system in a timely manner, [[Glenn Ewing|Glenn]] started talking with [[Gary Kildall|Gary]] about [[CP/M|CPM]], which Gary had written for [[Intel]] under contract. It took several months of twisting Gary's arm to get Gary to port it to the 8080. The final success came when Glenn talked Gary into just separating the I/O from the rest of it, with Glenn promising to re-write the I/O module for the [[IMSAI 8080]] (which he did). So CPM on the [[IMSAI]] was a joint effort between Glenn and Gary.
| Joe Killian&lt;ref name=&quot;Fischer_2001_Ewing&quot;/&gt;
}}

=== System startup ===
{{rquote|right|
[[Intel]] had hired [[Gary Kildall|him]] a few months earlier to write a control program monitor to run on their little demo system for 8008 and now 8080. [...] [[Glenn Ewing|Glenn]] knew this and he would be talking with [[Gary Kildall|Gary]], and he started twisting Gary's arm. He said, &quot;Hey Gary, why can't we run this in this IMSAI?&quot; &quot;The I/O's all different, won't run.&quot; But Glenn persists and finally makes a deal with Gary. He says, &quot;Okay Gary, if you split out the I/O, I'll write the BIOS, basic I/O's system,&quot; and Glenn named it then. &quot;We'll split it out separately. I'll write that part, as long as you can make a division in the program there.&quot; And he got Gary to do that and Glenn put those two pieces together and was running Gary's CP/M on an IMSAI. Glenn let us know that, and it wasn't too much later than [[Bill Millard|Bill]] was down there making arrangements with Gary Kildall to license [[CP/M]]. [...] Now that the BIOS is separated out, anybody could write a BIOS for their machine, if it was 8080-based, and run this, so he started selling that separately under the company [[Digital Research]] that he formed and did quite well.&quot;
| Joe Killian&lt;ref name=&quot;Fraley_2007_Killian&quot; /&gt;
}}

When an [[x86 microprocessor]] is reset, it loads its [[program counter]] with a fixed address near the top of the one-megabyte [[address space]] assignable in [[real mode]]. (Depending on the microprocessor model, it may also assert all of the address lines above the first 20, causing the real-mode address space to be mapped into the last megabyte of the physical address space, until the first FAR jump or call.) The address of the BIOS's memory is located such that it will be executed upon processor reset. There are only a few bytes in memory after the reset startup address, so a jump [[instruction (computer science)|instruction]] near the end of the BIOS ROM directs the processor to start executing the BIOS startup code at an earlier address.

If the system has just been powered up or the reset button was pressed (&quot;cold boot&quot;), the full [[power-on self-test]] (POST) is run. If Ctrl+Alt+Delete was pressed (&quot;warm boot&quot;), a special flag value is stored in [[nonvolatile BIOS memory]] before the processor is reset, and after the reset the BIOS startup code detects this flag and does not run the POST. This saves the time otherwise used to detect and test all memory. The [[non-volatile RAM]] (NVRAM) is in the [[real-time clock]] (RTC).

The POST checks, identifies, and initializes system devices such as the [[central processing unit|CPU]], [[random-access memory|RAM]], [[programmable interrupt controller|interrupt]] and [[DMA controller]]s and other parts of the [[chipset]], [[video display card]], [[computer keyboard|keyboard]], [[hard disk drive]], [[optical disc drive]] and other basic [[computer hardware|hardware]].

Early IBM PCs had a little-known routine in the POST that would attempt to download a program from into RAM through the keyboard port. (Note that no serial or parallel ports were standard on early IBM PCs, but a keyboard port of either the XT or AT / PS/2 type has been standard on practically every PC and clone.) If the download was apparently successful, the BIOS would verify a checksum on it and then run it.&lt;ref name=&quot;technical-ref-5-27&quot;/&gt; This feature was intended for factory test or diagnostic purposes. While it was of limited utility outside of factory or repair facilities, it could be used in a proprietary way to boot the PC as a satellite system to a host machine (which is essentially the same technical way it was used, if it was used, in the manufacturing environment).

=== Boot process ===
After the option ROM scan is completed and all detected ROM modules with valid checksums have been called, or immediately after POST in a BIOS version that does not scan for option ROMs, the BIOS calls INT 19h to start boot processing. Post-boot, Programs loaded can also call INT 19h to reboot the system, but they must be careful to disable interrupts and other asynchronous hardware processes that may interfere with the BIOS rebooting process, or else the system may hang or crash while it is rebooting.  Unique to the original IBM BIOS was that it would attempt to load a maintenance program through the keyboard port before performing any other elements of the boot process, such as before scanning for option ROMs or executing a boot loader.&lt;ref name=&quot;68X2537&quot;&gt;{{ cite web | title = IBM 5162 PC XT286 TechRef 68X2537 Technical Reference manual | date = August 1986 | page = 35 (System BIOS A-5) | url = http://www.reenigne.org/crtc/PC-XT.pdf | accessdate = 2014-12-11 | format = PDF}}&lt;/ref&gt;

When INT 19h is called, the BIOS attempts to locate [[boot loader]] software held on a storage device designated as a &quot;boot device&quot;, such as a [[hard disk]], a [[floppy disk]], [[CD]], or [[DVD]]. It loads and executes the first boot software it finds, giving it control of the PC.&lt;ref name=&quot;hsw1&quot;/&gt; This is the process that is known as ''[[booting]]'' (sometimes informally called &quot;booting up&quot;), which is short for &quot;bootstrapping&quot;.

The BIOS selects candidate boot devices using information collected by POST and configuration information from [[EEPROM]], [[CMOS]] RAM or, in the earliest PCs, [[DIP switch]]es. Following the boot priority sequence in effect, BIOS checks each device in order to see if it is bootable. For a disk drive or a device that logically emulates a disk drive, such as a [[USB Flash drive]] or perhaps a tape drive, to perform this check the BIOS attempts to load the first sector ([[boot sector]]) from the disk into RAM at memory address &lt;code&gt;0x0000:0x7C00&lt;/code&gt;. If the sector cannot be read (due to a missing or unformatted disk, or due to a hardware failure), the BIOS considers the device unbootable and proceeds to check the next device. If the sector is read successfully, some BIOSes will also check for the boot sector signature 0x55 0xAA in the last two bytes of the (512 byte long) sector, before accepting a boot sector and considering the device bootable.&lt;ref group=&quot;nb&quot; name=&quot;NB_Magic_AA55&quot;/&gt;&lt;!-- Not all BIOSes do this at all, and some do it only for floppies. Also, some BIOSes disallow higher speed access modes, if reading this or certain other signatures failed. --&gt;

The BIOS proceeds to test each device sequentially until a bootable device is found, at which time the BIOS transfers control to the loaded sector with a jump instruction to its first byte at address &lt;code&gt;0x0000:0x7C00&lt;/code&gt; (exactly 1&amp;nbsp;KiB below the 32&amp;nbsp;KiB mark); see [[MBR invocation]] and [[VBR invocation]]. (This location is one reason that an IBM PC requires at least 32&amp;nbsp;KiB of RAM in order to be equipped with a disk system; with 31 KiB or less, it would be impossible to boot from any disk, removable or fixed, using the BIOS boot protocol.) Most, but not all, BIOSes load the drive number (as used by INT 13h) of the boot drive into CPU register DL before jumping to the first byte of the loaded boot sector.

Note well that the BIOS does not interpret or process the contents of the boot sector other than to possibly check for the boot sector signature in the last two bytes; all interpretation of data structures like MBR partition tables and so-called BIOS Parameter Blocks is done by the boot program in the boot sector itself or by other programs loaded through the boot process and is beyond the scope of BIOS. Nothing about BIOS predicates these data structures or impedes their replacement or improvement.

A non-disk device such as a [[network adapter]] attempts booting by a procedure that is defined by its [[option ROM]] or the equivalent integrated into the motherboard BIOS ROM. As such, option ROMs may also influence or supplant the boot process defined by the motherboard BIOS ROM.

==== Boot priority ====
The user can control the boot process, to cause one medium to be booted instead of another when two or more bootable media are present, by taking advantage of the boot priority implemented by the BIOS. For example, most computers have a hard disk that is bootable, but usually there is a removable-media drive that has higher boot priority, so the user can cause a removable disk to be booted, simply by inserting it, without removing the hard disk drive or altering its contents to make it unbootable.

In most modern BIOSes, the boot priority order of all potentially bootable devices can be freely configured by the user through the BIOS configuration utility. In older BIOSes, limited boot priority options are selectable; in the earliest BIOSes, a fixed priority scheme was implemented, with floppy disk drives first, fixed disks (i.e. hard disks) second, and typically no other boot devices supported, subject to modification of these rules by installed option ROMs. The BIOS in an early PC also usually would only boot from the first floppy disk drive or the first hard disk drive, even if there were two drives of either type installed. All more advanced boot priority sequences evolved as incremental improvements on this basic system.

Historically the BIOS would try to boot from a floppy drive first and a hard disk second. The default for CD or DVD booting is an extension of this. With the [[El Torito (CD-ROM standard)|El Torito optical media boot standard]], the optical drive actually emulates a 3.5&quot; high-density floppy disk to the BIOS for boot purposes. Optical disks are a special case, because their lowest level of data organization is typically a fairly high-level file system (e.g. [[ISO 9660]] for CD-ROM).

Reading the &quot;first sector&quot; of a CD-ROM or DVD-ROM is not a simply defined operation like it is on a floppy disk or a hard disk. Furthermore, the complexity of the medium makes it difficult to write a useful boot program in one sector, even though optical media sectors are typically 2048 bytes each, four times the standard 512-byte size of floppy and legacy hard disk sectors. Therefore, optical media booting uses the El Torito standard, which specifies a way for an optical disk to contain an image of a high-density (1.44&amp;nbsp;MB) floppy disk and for the drive to provide access to this disk image in a simple manner that emulates floppy disk drive operations. Therefore, CD-ROM drives boot as emulated floppy disk drives; the bootable virtual floppy disk can contain software that provides access to the optical medium in its native format.

==== Boot failure ====
The behavior if the BIOS does not find a bootable device has varied as [[personal computer]]s developed. The original [[IBM PC]] and XT had [[Microsoft]] [[Cassette BASIC]] in ROM, and if no bootable device was found, [[IBM BASIC|ROM BASIC]] was started by calling INT 18h. Therefore, barring a hardware failure, an original IBM PC or XT would never fail to boot, either into [[IBM BASIC|BASIC]] or from disk (or through an option ROM). One model of the original IBM PC was available with no disk drive; a [[cassette recorder]] could be attached via the cassette port on the rear, for loading and saving BASIC programs to tape. Since few programs used BASIC in ROM, clone PC makers left it out; then a computer that failed to boot from a disk would display &quot;No ROM BASIC&quot; and halt (in response to INT 18h).

Later computers would display a message like &quot;No bootable disk found&quot;; some would prompt for a disk to be inserted and a key to be pressed, and when a key was pressed they would restart the boot process. Modern BIOSes may display nothing or may automatically enter the BIOS configuration utility when the boot process fails. Unlike earlier BIOSes, modern BIOSes are often written with the assumption that if the computer cannot be booted from a hard disk, the user will not have software that they want to boot from removable media instead. (Lately, typically it will only be a specialist computer technician who does that, only to get the computer back into a condition where it can be booted from the hard disk.)

=== Boot environment ===
{{Unreferenced section|date=October 2014}}

The environment for the boot program is very simple: the CPU is in [[real mode]] and the general-purpose and segment registers are undefined, except CS, SS, SP, and DL. CS is always zero and IP is initially &lt;code&gt;0x7C00&lt;/code&gt;. Because boot programs are always loaded at this fixed address, there is no need or motivation for a boot program to be relocatable. DL contains the drive number, as used with INT 13h, of the boot device, unless the BIOS is one that does not set the drive number in DL{{snd}} and then DL is undefined. SS:SP points to a valid stack that is presumably large enough to support hardware interrupts, but otherwise SS and SP are undefined. (A stack must be already set up in order for interrupts to be serviced, and interrupts must be enabled in order for the system timer-tick interrupt, which BIOS always uses at least to maintain the time-of-day count and which it initializes during POST, to be active and for the keyboard to work. The keyboard works even if the BIOS keyboard service is not called; keystrokes are received and placed in the 15-character type-ahead buffer maintained by BIOS.) The boot program must set up its own stack (or at least MS-DOS 6 acts like it must), because the size of the stack set up by BIOS is unknown and its location is likewise variable; although the boot program can investigate the default stack by examining SS:SP, it is easier and shorter to just unconditionally set up a new stack.

At boot time, all BIOS services are available, and the memory below address &lt;code&gt;0x00400&lt;/code&gt; contains the [[interrupt vector table]]. BIOS POST has initialized the system timers (8253 or 8254 IC), interrupt controller(s), DMA controller(s), and other motherboard/chipset hardware as necessary to bring all BIOS services to ready status. DRAM refresh for all system DRAM in conventional memory and extended memory, but not necessarily expanded memory, has been set up and is running. The [[interrupt vector]]s corresponding to the BIOS interrupts have been set to point at the appropriate entry points in the BIOS, hardware interrupt vectors for devices initialized by the BIOS have been set to point to the BIOS-provided ISRs, and some other interrupts, including ones that BIOS generates for programs to hook, have been set to a default dummy ISR that immediately returns. The BIOS maintains a reserved block of system RAM at addresses &lt;code&gt;0x00400–0x004FF&lt;/code&gt; with various parameters initialized during the POST. All memory at and above address &lt;code&gt;0x00500&lt;/code&gt; can be used by the boot program; it may even overwrite itself.

== Extensions (option ROMs) ==
Peripheral cards such as some hard disk drive controllers and some video display adapters have their own BIOS extension [[option ROM]]s, which provide additional functionality to BIOS. Code in these extensions runs before the BIOS boots the system from [[mass storage]]. These ROMs typically test and initialize hardware, add new BIOS services, and augment or replace existing BIOS services with their own versions of those services. For example, a [[SCSI controller]] usually has a BIOS extension ROM that adds support for hard drives connected through that controller. Some video cards have extension ROMs that replace the video services of the motherboard BIOS with their own video services. BIOS extension ROMs gain total control of the machine, so they can in fact do anything, and they may never return control to the BIOS that invoked them. An extension ROM could in principle contain an entire operating system or an application program, or it could implement an entirely different boot process such as booting from a network. Operation of an IBM-compatible computer system can be completely changed by removing or inserting an adapter card (or a ROM chip) that contains a BIOS extension ROM.

The motherboard BIOS typically contains code to access hardware components necessary for bootstrapping the system, such as the keyboard, display, and storage. In addition, plug-in adapter cards such as [[SCSI]], [[RAID]], [[network interface card]]s, and video boards often include their own BIOS (e.g. [[Video BIOS]]), complementing or replacing the system BIOS code for the given component. Even devices built into the motherboard can behave in this way; their option ROMs can be stored as separate code on the main BIOS [[flash chip]], and upgraded either in tandem with, or separately from, the main BIOS.

An add-in card requires an option ROM if the card is not supported by the main BIOS and the card needs to be initialized or made accessible through BIOS services before the operating system can be loaded (usually this means it is required in the bootstrapping process). Even when it is not required, an option ROM can allow an adapter card to be used without loading driver software from a storage device after booting begins{{snd}} with an option ROM, no time is taken to load the driver, the driver does not take up space in RAM nor on hard disk, and the driver software on the ROM always stays with the device so the two cannot be accidentally separated. Also, if the ROM is on the card, both the peripheral hardware and the driver software provided by the ROM are installed together with no extra effort to install the software. An additional advantage of ROM on some early PC systems (notably including the IBM PCjr) was that ROM was faster than main system RAM. (On modern systems, the case is very much the reverse of this, and BIOS ROM code is usually copied (&quot;shadowed&quot;) into RAM so it will run faster.)

There are many methods and utilities for examining the contents of various motherboard BIOS and expansion ROMs, such as Microsoft [[DEBUG (DOS Command)|DEBUG]] or the Unix [[dd (Unix)|dd]].

=== Boot procedure ===
If an expansion ROM wishes to change the way the system boots (such as from a network device or a SCSI adapter for which the BIOS has no driver code) in a cooperative way, it can use the ''BIOS Boot Specification'' (BBS) [[application programming interface|API]] to register its ability to do so. Once the expansion ROMs have registered using the BBS APIs, the user can select among the available boot options from within the BIOS's user interface. This is why most BBS compliant PC BIOS implementations will not allow the user to enter the BIOS's user interface until the expansion ROMs have finished executing and registering themselves with the BBS API.{{Citation needed|date=October 2008}} The specification can be downloaded from the ACPICA website. The official title is BIOS Boot Specification (Version 1.01, 11 January 1996).&lt;ref name=&quot;boot-spec-96&quot;/&gt;

Also, if an expansion ROM wishes to change the way the system boots unilaterally, it can simply hook INT 19h or other interrupts normally called from interrupt 19h, such as INT 13h, the BIOS disk service, to intercept the BIOS boot process. Then it can replace the BIOS boot process with one of its own, or it can merely modify the boot sequence by inserting its own boot actions into it, by preventing the BIOS from detecting certain devices as bootable, or both. Before the BIOS Boot Specification was promulgated, this was the only way for expansion ROMs to implement boot capability for devices not supported for booting by the native BIOS of the motherboard.{{Citation needed|date=October 2014}}

=== Initialization ===
After the motherboard BIOS completes its POST, most BIOS versions search for option ROM modules, also called BIOS extension ROMs, and execute them. The motherboard BIOS scans for extension ROMs in a portion of the &quot;[[upper memory area]]&quot; (the part of the x86 real-mode address space at and above address 0xA0000) and runs each ROM found, in order. To discover memory-mapped [[Industry Standard Architecture|ISA]] option ROMs, a BIOS implementation scans the real-mode address space from &lt;code&gt;0x0C0000&lt;/code&gt; to &lt;code&gt;0x0F0000&lt;/code&gt; on 2&amp;nbsp;[[KiB]] boundaries, looking for a two-byte ROM ''signature'': 0x55 followed by 0xAA. In a valid expansion ROM, this signature is followed by a single byte indicating the number of 512-byte blocks the expansion ROM occupies in real memory, and the next byte is the option ROM's [[entry point]] (also known as its &quot;entry offset&quot;). A [[checksum]] of the specified number of 512-byte blocks is calculated, and if the ROM has a valid checksum, the BIOS transfers control to the entry address, which in a normal BIOS extension ROM should be the beginning of the extension's initialization routine.

At this point, the extension ROM code takes over, typically testing and initializing the hardware it controls and registering [[interrupt vector]]s for use by post-boot applications. It may use BIOS services (including those provided by previously initialized option ROMs) to provide a user configuration interface, to display diagnostic information, or to do anything else that it requires. While the actions mentioned are typical behaviors of BIOS entension ROMs, each option ROM receives total control of the computer and may do anything at all, as noted with more detail in the Extensions section below; it is possible that an option ROM will not returning to BIOS, pre-empting the BIOS's boot sequence altogether.

An option ROM should normally return to the BIOS after completing its initialization process. Once (and if) an option ROM returns, the BIOS continues searching for more option ROMs, calling each as it is found, until the entire option ROM area in the memory space has been scanned.

=== Physical placement ===
Option ROMs normally reside on adapter cards. However, the original PC, and perhaps also the PC XT, have a spare ROM socket on the motherboard (the &quot;system board&quot; in IBM's terms) into which an option ROM can be inserted, and the four ROMs that contain the BASIC interpreter can also be removed and replaced with custom ROMs which can be option ROMs. The [[IBM PCjr]] is unique among PCs in having two ROM cartridge slots on the front. Cartridges in these slots map into the same region of the upper memory area used for option ROMs, and the cartridges can contain option ROM modules that the BIOS would recognize. The cartridges can also contain other types of ROM modules, such as BASIC programs, that are handled differently. One PCjr cartridge can contain several ROM modules of different types, possibly stored together in one ROM chip.

== Operating system services ==
The BIOS ROM is customized to the particular manufacturer's hardware, allowing low-level services (such as reading a keystroke or writing a sector of data to diskette) to be provided in a standardized way to programs, including operating systems. For example, an IBM PC might have either a monochrome or a color display adapter (using different display memory addresses and hardware), but a single, standard, BIOS system call may be invoked to display a character at a specified position on the screen in [[text mode]] or [[All points addressable|graphics mode]].

The BIOS provides a small [[library (computing)|library]] of basic input/output functions to operate peripherals (such as the keyboard, rudimentary text and graphics display functions and so forth). When using MS-DOS, BIOS services could be accessed by an application program (or by MS-DOS) by executing an [[INT 13h]] interrupt instruction to access disk functions, or by executing one of a number of other documented [[BIOS interrupt call]]s to access video display, keyboard, cassette, and other device functions.

[[Operating system]]s and executive software that are designed to supersede this basic firmware functionality provide replacement software interfaces to application software. Applications can also provide these services to themselves. This began even in the 1980s under MS-DOS, when programmers observed that using the BIOS video services for graphics display was very slow. To increase the speed of screen output, many programs bypassed the BIOS and programmed the video display hardware directly. Other graphics programmers, particularly but not exclusively in the [[demoscene]], observed that there were technical capabilities of the PC display adapters that were not supported by the IBM BIOS and could not be taken advantage of without circumventing it. Since the AT-compatible BIOS ran in Intel [[real mode]], operating systems that ran in protected mode on 286 and later processors required hardware device drivers compatible with protected mode operation to replace BIOS services.

In modern personal computers running modern operating systems the BIOS is used only during booting and initial loading of system software. Before the operating system's first graphical screen is displayed, input and output are typically handled through BIOS. A boot menu such as the textual menu of Windows, which allows users to choose an operating system to boot, to boot into the safe mode, or to use the last known good configuration, is displayed through BIOS and receives keyboard input through BIOS.{{Citation needed|date=October 2014}}

However, it is also important to note that modern PCs can still boot and run legacy operating systems such as MS-DOS or DR-DOS that rely heavily on BIOS for their console and disk I/O.  Thus, while not as central as they once were, the BIOS services are still important.

=== Processor microcode updates ===
[[Intel]] processors have reprogrammable [[microcode]] since the [[P6 (microarchitecture)|P6]] microarchitecture.&lt;ref name=&quot;Mueller-1&quot;/&gt;&lt;ref name=&quot;microcode-09&quot;/&gt; The BIOS may contain patches to the processor microcode that fix errors in the initial processor microcode; reprogramming is not persistent, thus loading of microcode updates is performed each time the system is powered up.  Without reprogrammable microcode, an expensive processor swap would be required;&lt;ref name=&quot;Mueller-2&quot;/&gt; for example, the [[Pentium FDIV bug]] became an expensive fiasco for Intel as it required a [[product recall]] because the original Pentium processor's defective microcode could not be reprogrammed.

=== Identification ===
Some BIOSes contain a &quot;SLIC&quot; (software licensing description table), a digital signature placed inside the BIOS by the manufacturer, for example [[Dell]]. (It is often casually called a BIOS tattoo or a tattooed BIOS.) This SLIC is inserted in the ACPI table and contains no active code.

Computer manufacturers that distribute OEM versions of Microsoft Windows and Microsoft application software can use the SLIC to authenticate licensing to the OEM Windows Installation disk and system [[recovery disc]] containing Windows software. Systems having a SLIC can be preactivated with an OEM product key, and they verify an XML formatted OEM certificate against the SLIC in the BIOS as a means of self-activating (see [[System Locked Preinstallation]]). If a user performs a fresh install of Windows, they will need to have possession of both the OEM key and the digital certificate for their SLIC in order to bypass activation; in practice this is extremely unlikely and hence the only real way this can be achieved is if the user performs a restore using a pre-customised image provided by the OEM. Cracks for non-genuine Windows distributions usually edit the SLIC or emulate it in order to bypass Windows activation.

=== Overclocking ===
Some BIOS implementations allow [[overclocking]], an action in which the [[central processing unit|CPU]] is adjusted to a higher [[clock rate]] than its manufacturer rating for guaranteed capability. Overclocking may, however, seriously compromise system reliability in insufficiently cooled computers and generally shorten component lifespan. Overclocking, when incorrectly performed, may also cause components to overheat so quickly that they mechanically destroy themselves.&lt;ref&gt;{{cite web|url=http://lifehacker.com/a-beginners-introduction-to-overclocking-your-intel-pr-5580998|title=A Beginner's Introduction to Overclocking Your Intel Processor|author=Whitson Gordon|publisher=Gawker Media|work=Lifehacker|accessdate=6 December 2014}}&lt;/ref&gt;

=== Modern use ===
Some [[operating system]]s, for example [[MS-DOS]], rely on the BIOS to carry out most input/output tasks within the PC.&lt;ref name=&quot;computing-basics-94&quot;/&gt;

Because the BIOS still runs in 16-bit [[real mode]], calling BIOS services directly is inefficient for protected-mode operating systems. BIOS services are not used by modern multitasking [[GUI]] operating systems after they initially load, so the importance of the primary part of BIOS is greatly reduced from what it was initially.

Later BIOS implementations took on more complex functions, by including interfaces such as [[Advanced Configuration and Power Interface]] (ACPI); these functions include [[power management]], [[hot swapping]], and thermal management.  At the same time, since 2010 BIOS technology is in a transitional process toward the [[Unified Extensible Firmware Interface|UEFI]].&lt;ref name=&quot;Bradley&quot; /&gt;

== Configuration ==

=== Setup utility ===
Historically, the BIOS in the IBM PC and XT had no built-in user interface. The BIOS versions in earlier PCs (XT-class) were not software configurable; instead, users set the options via [[DIP switch]]es on the motherboard. Later computers, including all IBM-compatibles with 80286 CPUs, had a battery-backed [[nonvolatile BIOS memory]] (CMOS RAM chip) that held BIOS settings.&lt;ref name=&quot;CMOS Battery&quot;/&gt; These settings, such as video-adapter type, memory size, and hard-disk parameters, could only be configured by running a configuration program from a disk, not built into the ROM. A special &quot;reference diskette&quot; was inserted in an IBM AT to configure settings such as memory size.

Early BIOS versions did not have passwords or boot-device selection options. The BIOS was hard-coded to boot from the first floppy drive, or, if that failed, the first hard disk. Access control in early AT-class machines was by a physical keylock switch (which was not hard to defeat if the computer case could be opened). Anyone who could switch on the computer could boot it.{{citation needed|date=March 2013}}

Later, 386-class computers started integrating the BIOS setup utility in the ROM itself, alongside the BIOS code; these computers usually boot into the BIOS setup utility if a certain key or key combination is pressed, otherwise the BIOS POST and boot process are executed.

[[File:Award BIOS setup utility.png|thumb|Award BIOS setup utility on a standard PC]]

A modern BIOS setup utility has a menu-based [[user interface]] (UI) accessed by pressing a certain key on the keyboard when the PC starts. Usually the key is advertised for short time during the early startup, for example &quot;Press F1 to enter CMOS setup&quot;. The actual key depends on specific hardware. Features present in the BIOS setup utility typically include:

* Configuring the hardware components, including setting their various operating modes and frequencies (for example, selecting how the storage controllers are visible to the operating system, or overlocking the CPU)
* Setting the [[system clock]]
* Enabling or disabling system components
* Selecting which devices are potential boot devices, and in which order booting from them will be attempted
* Setting various passwords, such as a password for securing access to the BIOS user interface functions itself and preventing malicious users from booting the system from unauthorized portable storage devices, a password for booting the system, or a hard disk drive password that limits access to it and stays assigned even if the hard disk drive is moved to another computer.

=== Reprogramming ===
In modern PCs the BIOS is stored in [[EEPROM|rewritable memory]], allowing the contents to be replaced or &quot;rewritten&quot;. This rewriting of the contents is sometimes termed ''flashing'', based on the common use of a kind of EEPROM known technically as &quot;flash EEPROM&quot; and colloquially as &quot;flash memory&quot;. It can be done by a special program, usually provided by the system's manufacturer, or at [[power-on self-test|POST]], with a BIOS image in a hard drive or [[USB flash drive]]. A file containing such contents is sometimes termed &quot;a BIOS image&quot;. A BIOS might be reflashed in order to upgrade to a newer version to fix bugs or provide improved performance or to support newer hardware, or a reflashing operation might be needed to fix a damaged BIOS.

== Hardware ==
[[File:Phoenix bios.jpg|thumb|upright|[[Phoenix Technologies|PhoenixBIOS]] D686. This BIOS chip is housed in a [[plastic leaded chip carrier|PLCC]] package in a socket.]]

The original IBM PC BIOS (and cassette BASIC) was stored on mask-programmed [[read-only memory]] (ROM) chips in sockets on the motherboard. ROMs could be replaced, but not altered, by users. To allow for updates, many compatible computers used re-programmable memory devices such as [[EPROM]] and later [[flash memory]] devices. According to Robert Braver, the president of the BIOS manufacturer Micro Firmware, '''Flash BIOS''' chips became common around 1995 because the electrically erasable PROM (EEPROM) chips are cheaper and easier to program than standard [[ultraviolet]] erasable PROM ([[EPROM]]) chips. Flash chips are programmed (and re-programmed) in-circuit, while EPROM chips need to be removed from the motherboard for re-programming.&lt;ref name=&quot;smart-computing-97&quot;/&gt; BIOS versions are upgraded to take advantage of newer versions of hardware and to correct bugs in previous revisions of BIOSes.&lt;ref name=&quot;smart-computing-96&quot;/&gt;

Beginning with the IBM AT, PCs supported a hardware clock settable through BIOS. It had a century bit which allowed for manually changing the century when the year 2000 happened. Most BIOS revisions created in 1995 and nearly all BIOS revisions in 1997 supported [[Year 2000 problem|the year 2000]] by setting the century bit automatically when the clock rolled past midnight, December 31, 1999.&lt;ref name=&quot;smart-somputing-99&quot;/&gt;

The first flash chips were attached to the [[Industry Standard Architecture|ISA bus]]. Starting in 1997, the BIOS flash moved to the [[Low Pin Count|LPC]] bus, a functional replacement for ISA, following a new standard implementation known as &quot;firmware hub&quot; (FWH). In 2006, the first systems supporting a [[Serial Peripheral Interface]] (SPI) appeared, and the BIOS flash memory moved again.{{citation needed|date=March 2013}}

The size of the BIOS, and the capacity of the ROM, EEPROM, or other media it may be stored on, has increased over time as new features have been added to the code; BIOS versions now exist with sizes up to 16 megabytes. For contrast, the original IBM PC BIOS was contained in an 8 KiB mask ROM. Some modern motherboards are including even bigger NAND [[flash memory]] ICs on board which are capable of storing whole compact operating systems, such as some [[Linux distribution]]s. For example, some ASUS motherboards included [[SplashTop]] Linux embedded into their NAND flash memory ICs.&lt;ref name=&quot;geek-splashtop&quot;/&gt;  However, the idea of including an operating system along with BIOS in the ROM of a PC is not new; in the 1980s, Microsoft offered a ROM option for MS-DOS, and it was included in the ROMs of some PC clones such as the [[Tandy 1000#Tandy 1000 HX .26 TX|Tandy 1000 HX]].

Another type of firmware chip was found on the IBM PC AT and early compatibles. In the AT, the [[keyboard controller (computing)|keyboard interface]] was controlled by a [[microcontroller]] with its own programmable memory. On the IBM AT, that was a 40-pin socketed device, while some manufacturers used an EPROM version of this chip which resembled an EPROM. This controller was also assigned the [[A20 gate]] function to manage memory above the one-megabyte range; occasionally an upgrade of this &quot;keyboard BIOS&quot; was necessary to take advantage of software that could use upper memory.{{citation needed|date=March 2013}} &lt;!-- An earlier version of this article stated that the IBM PC also used a microcontroller to control the keyboard interface.  This is incorrect; the PC and XT used a simple shift register and an 8-bit parallel port of the 8255A PPI chip for the computer end of the keyboard interface. --&gt;

The BIOS may contain components such as the [[Memory Reference Code]] (MRC), which is responsible for handling memory timings and related hardware settings.&lt;ref name=&quot;Life and Times&quot;/&gt;{{rp|8}}&lt;ref name=&quot;Hilber&quot;/&gt;

== Vendors and products ==
{| class=&quot;wikitable floatright&quot; style=&quot;margin-left: 2em;&quot;
|+ Comparison of different BIOS implementations
|-
!
| [[Award Software|AwardBIOS]]
| [[American Megatrends|AMIBIOS]] &lt;!--latest version is 8 --&gt;
| [[Insyde Software|Insyde]]
| [[SeaBIOS]] &lt;!--latest version is 1.6.3 --&gt;
|-
! License
| Proprietary
| Proprietary
| Proprietary
| [[GNU Lesser General Public License|LGPL]] v3
|-
! Maintained / developed
| {{No}}
| {{Yes}}
| {{Yes}}
| {{Yes}}
|-
! 32-bit PCI BIOS calls
| {{Dunno}}
| {{Dunno}}
| {{Dunno}}
| {{Yes}}
|-
! {{Abbr|AHCI|Advanced Host Controller Interface}}
| {{Yes}}
| {{Yes}}
| {{Yes}}
| {{Yes}}
|-
! {{Abbr|APM|Advanced Power Management}}
| {{Yes}}
| {{Yes}}
| {{Yes}} &lt;small&gt;(1.2)&lt;/small&gt;
| {{Yes}} &lt;small&gt;(1.2)&lt;/small&gt;
|-
! {{Abbr|BBS|BIOS Boot Specification}}
| {{Yes}}
| {{Yes}} &lt;!-- SATA, IDE, USB, LAN, Floppy --&gt;
| {{Yes}}
| {{Yes}}
|-
! Boot menu
| {{Yes}}
| {{Yes}}
| {{Yes}}
| {{Yes}}
|-
! Compression
| {{Yes}} &lt;small&gt;(LHA)&lt;/small&gt;
| {{Yes}} &lt;small&gt;(LHA)&lt;/small&gt;
| {{Yes}} &lt;small&gt;(RLE)&lt;/small&gt;
| {{Yes}} &lt;small&gt;(LZMA)&lt;/small&gt;
|-
! CMOS
| {{Yes}}
| {{Yes}}
| {{Yes}}
| {{Yes}}
|-
! {{Abbr|EDD|Enhanced Disk Drive}}
| {{Yes}}
| {{Yes}}
| {{Yes}}
| {{Yes}} &lt;small&gt;(3.0)&lt;/small&gt;
|-
! {{Abbr|ESCD|Extended System Configuration Data}}
| {{Yes}}
| {{Yes}}
| {{Dunno}}
| {{No}}
|-
! Flash from ROM
| {{Dunno}}
| {{Yes}} &lt;!-- Qflash, Del-key --&gt;
| {{Dunno}}
| {{No}}
|-
! Language
| Assembly
| Assembly
| Assembly
| [[C (programming language)|C]]
|-
! {{Abbr|LBA|Logical Block Addressing}}
| {{Yes}} &lt;small&gt;(48)&lt;/small&gt;
| {{Yes}} &lt;small&gt;(48)&lt;/small&gt;
| {{Yes}}
| {{Yes}} &lt;small&gt;(48)&lt;/small&gt;
|-
! MultiProcessor Specification
| {{Yes}}
| {{Yes}}
| {{Yes}}
| {{Yes}}
|-
! Option ROM
| {{Yes}}
| {{Yes}}
| {{Yes}}
| {{Yes}}
|-
! Password
| {{Yes}}
| {{Yes}}
| {{Yes}}
| {{No}}
|-
! {{Abbr|PMM|Post Memory Manager}}
| {{Dunno}}
| {{Yes}}
| {{Dunno}}
| {{Yes}}
|-
! Setup screen
| {{Yes}}
| {{Yes}}
| {{Yes}}
| {{No}}
|-
! {{Abbr|SMBIOS|System Management BIOS}}
| {{Yes}} &lt;!-- 2.4 or newer --&gt;
| {{Yes}} &lt;!-- 2.5 or newer --&gt;
| {{Yes}} &lt;!-- 2.6 or newer --&gt;
| {{Yes}} &lt;small&gt;(2.4)&lt;/small&gt;
|-
! Splash screen
| {{Yes}} &lt;!-- 640x480x256 proprietary AWBM (Award Bitmap) format, uses .bmp extension but is not a Windows Bitmap --&gt;
| {{Yes}} &lt;small&gt;(PCX)&lt;/small&gt; &lt;!-- 640x480x256 pcx --&gt;
| {{Yes}}
| {{Yes}} &lt;small&gt;(BMP, JPG)&lt;/small&gt; &lt;!-- JPEG would use 16 or 24 bpp video mode, BMP use 24bpp mode only --&gt;
|-
! USB booting
| {{Yes}}
| {{Yes}}
| {{Yes}} &lt;!-- at least usb floppy --&gt;
| {{Yes}}
|-
! USB hub
| {{Dunno}}
| {{Dunno}}
| {{Dunno}}
| {{Yes}}
|-
! USB keyboard
| {{Yes}}
| {{Yes}}
| {{Yes}}
| {{Yes}}
|-
! USB mouse
| {{Yes}}
| {{Yes}}
| {{Yes}}
| {{Yes}}
|}

IBM published the entire listings of the BIOS for its original PC, PC XT, PC AT, and other contemporary PC models, in an appendix of the Technical Reference manual for each machine type. The effect of the publication of the BIOS listings is that anyone can see exactly what a definitive BIOS does and how it does it. [[Phoenix Technologies]] was the first company to write a fully compatible and completely legal BIOS through clean-room [[reverse engineering]].

New standards grafted onto the BIOS are usually without complete public documentation or any BIOS listings. As a result, it is not as easy to learn the intimate details about the many non-IBM additions to BIOS as about the core BIOS services.

Most PC motherboard suppliers license a BIOS &quot;core&quot; and toolkit from a commercial third-party, known as an &quot;independent BIOS vendor&quot; or IBV. The motherboard manufacturer then customizes this BIOS to suit its own hardware. For this reason, updated BIOSes are normally obtained directly from the motherboard manufacturer. Major BIOS vendors include [[American Megatrends]] (AMI), [[Insyde Software]], [[Phoenix Technologies]] and [[Byosoft]]. Former vendors include [[Award Software]] and [[Microid Research]] which were acquired by [[Phoenix Technologies]] in 1998; Phoenix later phased out the Award Brand name. [[General Software]], which was also acquired by Phoenix in 2007, sold BIOS for Intel processor based embedded systems.

The open source community increased their effort to develop a replacement for proprietary BIOSes and their future incarnations with an open sourced counterpart through the [[coreboot]] and [[OpenBIOS]]/[[Open Firmware]] projects. [[Advanced Micro Devices|AMD]] provided product specifications for some chipsets, and [[Google]] is sponsoring the project. [[Motherboard]] manufacturer [[Tyan]] offers [[coreboot]] next to the standard BIOS with their [[Opteron]] line of motherboards. [[Micro-Star International|MSI]] and [[Gigabyte Technology]] have followed suit with the MSI K9ND MS-9282 and MSI K9SD MS-9185 resp. the M57SLI-S4 models.

== Security ==
[[File:AMIBIOSIntel CPU uCode Error.jpg|thumb|An [[American Megatrends]] BIOS showing a &quot;[[Intel]] CPU uCode Loading Error&quot; after a failed attempt to upload microcode patches into the CPU.]]&lt;!-- probably just because the CPU revision isn't recognized by this BIOS revision.--&gt;
[[File:Bios chip-2011-04-11.jpg|thumb|Detached BIOS Chip]]

[[EEPROM]] chips are advantageous because they can be easily updated by the user; hardware manufacturers frequently issue BIOS updates to upgrade their products, improve compatibility and remove [[software bug|bugs]]. However, this advantage had the risk that an improperly executed or aborted BIOS update could render the computer or device unusable. To avoid these situations, more recent BIOSes use a &quot;boot block&quot;; a portion of the BIOS which runs first and must be updated separately. This code verifies if the rest of the BIOS is intact (using [[hash function|hash]] [[checksum]]s or other methods) before transferring control to it. If the boot block detects any corruption in the main BIOS, it will typically warn the user that a recovery process must be initiated by booting from [[removable media]] (floppy, CD or USB memory) so the user can try flashing the BIOS again. Some [[motherboard]]s have a ''backup'' BIOS (sometimes referred to as DualBIOS boards) to recover from BIOS corruptions.

There are at least four known BIOS attack viruses, two of which were for demonstration purposes. The first one found in the wild was Mebromi, targeting Chinese users.

The first BIOS virus was [[CIH (computer virus)|CIH]], whose name matches the initials of its creator, Chen Ing Hau. CIH was also called the &quot;Chernobyl Virus&quot;, because its payload date was 1999-04-26, the 13th anniversary of the [[Chernobyl accident]]. CIH appeared in mid-1998 and became active in April 1999. It was able to erase flash ROM BIOS content. Often, infected computers could no longer boot, and people had to remove the flash ROM IC from the motherboard and reprogram it. CIH targeted the then-widespread Intel i430TX motherboard chipset and took advantage of the fact that the [[Windows 9x]] operating systems, also widespread at the time, allowed direct hardware access to all programs.

Modern systems are not vulnerable to CIH because of a variety of chipsets being used which are incompatible with the Intel i430TX chipset, and also other flash ROM IC types. There is also extra protection from accidental BIOS rewrites in the form of boot blocks which are protected from accidental overwrite or dual and quad BIOS equipped systems which may, in the event of a crash, use a backup BIOS. Also, all modern operating systems such as [[FreeBSD]], [[Linux]], [[OS X]], [[Windows NT]]-based Windows OS like [[Windows 2000]], [[Windows XP]] and newer, do not allow user-mode programs to have direct hardware access.

As a result, as of 2008, CIH has become essentially harmless, at worst causing annoyance by infecting executable files and triggering antivirus software. Other BIOS viruses remain possible, however;&lt;ref name=&quot;Yam&quot;&gt;[http://www.tomshardware.com/news/bios-virus-rootkit-security-backdoor,7400.html New BIOS Virus Withstands HDD Wipes], March 27, 2009. Marcus Yam. Tom's Hardware US&lt;/ref&gt; since most Windows home users without Windows Vista/7's UAC run all applications with administrative privileges, a modern CIH-like virus could in principle still gain access to hardware without first using an exploit. The operating system [[OpenBSD]] prevents all users from having this access and the grsecurity patch for the linux kernel also prevents this direct hardware access by default, the difference being an attacker requiring a much more difficult kernel level exploit or reboot of the machine.

The second BIOS virus was a technique presented by John Heasman, principal security consultant for UK-based Next-Generation Security Software. In 2006, at the Black Hat Security Conference, he showed how to elevate privileges and read physical memory, using malicious procedures that replaced normal [[Advanced Configuration and Power Interface|ACPI]] functions stored in flash memory.

The third BIOS virus was a technique called &quot;Persistent BIOS infection.&quot; It appeared in 2009 at the CanSecWest Security Conference in Vancouver, and at the SyScan Security Conference in Singapore. Researchers Anibal Sacco&lt;ref name=&quot;AutoTU-1&quot;/&gt; and Alfredo Ortega, from Core Security Technologies, demonstrated how to insert malicious code into the decompression routines in the BIOS, allowing for nearly full control of the PC at start-up, even before the operating system is booted. The proof-of-concept does not exploit a flaw in the BIOS implementation, but only involves the normal BIOS flashing procedures. Thus, it requires physical access to the machine, or for the user to be root. Despite these requirements, Ortega underlined the profound implications of his and Sacco's discovery: &quot;We can patch a driver to drop a fully working [[rootkit]]. We even have a little code that can remove or disable antivirus.&quot;&lt;ref name=&quot;Fisher&quot;/&gt;

Mebromi is a [[Trojan horse (computing)|trojan]] which targets computers with [[AwardBIOS]], [[Microsoft Windows]], and [[antivirus software]] from two Chinese companies: [[Rising Antivirus]] and Jiangmin KV Antivirus.&lt;ref name=&quot;Giuliani&quot;/&gt;&lt;ref name=&quot;BMW&quot;/&gt;&lt;ref name=&quot;Yuan&quot;/&gt; Mebromi installs a rootkit which infects the [[master boot record]].

In a December 2013 interview with [[CBS 60 Minutes]], Deborah Plunkett, Information Assurance Director for the US [[National Security Agency]] claimed that NSA analysts had uncovered and thwarted a possible BIOS attack by a foreign nation state. The attack on the world's computers could have allegedly &quot;literally taken down the US economy.&quot; The segment further cites anonymous cyber security experts briefed on the operation as alleging the plot was conceived in China.&lt;ref name=&quot;cbs-news-60-minutes&quot;/&gt; A later article in [[The Guardian]] cast doubt on the likelihood of such a threat, quoting Berkeley computer-science researcher Nicholas Weaver, [[Matt Blaze]], a computer and information sciences professor at the University of Pennsylvania, and cybersecurity expert Robert David Graham in an analysis of the NSA's claims.&lt;ref name=&quot;Ackerman&quot;/&gt;

== Alternatives and successors ==
{{Hatnote|For comparable software on other computer systems, see [[booting]].}}

{{As of|2011}}, the BIOS is being replaced by the more complex [[Extensible Firmware Interface]] (EFI) in many new machines. EFI is a specification which replaces the runtime interface of the legacy BIOS. Initially written for the Itanium architecture, EFI is now available for [[x86]] and [[x86-64]] platforms; the specification development is driven by The [[Unified EFI Forum]], an industry [[Special Interest Group]]. EFI booting has been supported in only [[Microsoft Windows]] versions supporting [[GUID Partition Table|GPT]],&lt;ref name=&quot;windows-gpt&quot;/&gt; the [[Linux kernel]] 2.6.1 and later, and [[Mac OS X]] on [[Apple–Intel architecture|Intel-based Macs]].&lt;ref name=&quot;intel-uefi&quot;/&gt;

Other alternatives to the functionality of the &quot;Legacy BIOS&quot; in the x86 world include [[coreboot]].

A number of larger, more powerful servers and workstations use a platform-independent [[Open Firmware]] (IEEE-1275) based on the [[Forth (programming language)|Forth]] programming language; it is included with Sun's [[SPARC]] computers, IBM's [[RS/6000]] line, and other [[PowerPC]] systems such as the [[Common Hardware Reference Platform|CHRP]] motherboards, along with the x86-based [[OLPC XO-1]]. Later x86-based personal computer operating systems, like Windows NT, use their own, native drivers; this makes it much easier to extend support to new hardware.

== See also ==
{{Portal|Computing}}

{{Div col||22em}}
* [[e820]]
* [[Extended System Configuration Data]]
* [[Double boot]]
* [[Plug and play]]
* [[Ralf Brown's Interrupt List]]
* [[System Management BIOS]]
* [[VESA BIOS Extensions]]
* [[XDK Debug BIOS]]
{{Div col end}}

== Notes ==
{{reflist|group=&quot;nb&quot;|refs=
&lt;ref group=&quot;nb&quot; name=&quot;NB_Magic_AA55&quot;&gt;The signature at offset &lt;code&gt;+0x1FE&lt;/code&gt; in boot sectors is &lt;code&gt;0x55 0xAA&lt;/code&gt;, that is &lt;code&gt;0x55&lt;/code&gt; at offset &lt;code&gt;+0x1FE&lt;/code&gt; and &lt;code&gt;0xAA&lt;/code&gt; at offset &lt;code&gt;+0x1FF&lt;/code&gt;. Since [[little-endian]] representation must be assumed in the context of [[IBM PC]] compatible machines, this can be written as 16-bit word &lt;code&gt;0xAA55&lt;/code&gt; in programs for [[Intel x86|x86]] processors (note the swapped order), whereas it would have to be written as &lt;code&gt;0x55AA&lt;/code&gt; in programs for other CPU architectures using a [[big-endian]] representation. Since this has been mixed up numerous times in books and even in original Microsoft reference documents,&lt;!-- one example of many: http://technet.microsoft.com/en-us/library/cc977219.aspx as of 2012-01-14 --&gt; this article uses the offset-based byte-wise on-disk representation to avoid any possible misinterpretation.&lt;/ref&gt;
}}

== References ==
{{reflist|30em|refs=
&lt;ref name = &quot;pcguidedefinition&quot;&gt;{{cite web|url=http://www.pcguide.com/ref/mbsys/bios/index.htm|title= Ref&amp;nbsp;— System BIOS|work= PCGuide|accessdate=6 December 2014}}&lt;/ref&gt;
&lt;ref name=&quot;Kildall_1975_BDOS&quot;&gt;{{citation | title = CP/M 1.1 or 1.2 BIOS and BDOS for Lawrence Livermore Laboratories | date = June 1975 | first = Gary A. | last = Kildall | authorlink = Gary Kildall}}&lt;/ref&gt;
&lt;ref name=&quot;Kildall_1980_CPM&quot;&gt;{{ cite web | title = The History of CP/M, THE EVOLUTION OF AN INDUSTRY: ONE PERSON'S VIEWPOINT | first = Gary A. | last = Kildall | authorlink = Gary Kildall | date = January 1980 | publisher = [[Dr. Dobb's Journal]] of Computer Calisthenics &amp; Orthodontia | pages = 6–7 | edition = Vol. 5, No. 1, Number 41 | url = http://www.retrotechnology.com/dri/CPM_history_kildall.txt | accessdate = 2013-06-03}}&lt;/ref&gt;
&lt;ref name=&quot;Bradley&quot;&gt;{{ cite web|last=Bradley |first=Tony |url=http://www.pcworld.com/article/248426/r_i_p_bios_a_uefi_primer.html |title=R.I.P. BIOS: A UEFI Primer |publisher=PCWorld |accessdate=2014-01-27}}&lt;/ref&gt;
&lt;ref name=&quot;Swaine_1997_Entrepreneurship&quot;&gt;{{ cite journal | first = Michael | last = Swaine | authorlink = Michael Swaine (author) | date = 1997-04-01 | title = Gary Kildall and Collegial Entrepreneurship | journal = [[Dr. Dobb's Journal]] | url = http://www.ddj.com/184410428 | accessdate = 2006-11-20}}&lt;/ref&gt;
&lt;ref name=&quot;Fischer_2001_Ewing&quot;&gt;{{ cite web | title = Gary Kildall's CP/M: Some early CP/M history - 1976-1977 | first = A. Joseph &quot;Joe&quot; | last = Killian | authorlink = Joe Killian | publisher = [[Thomas Fischer (IMSAI)|Thomas &quot;Todd&quot; Fischer]], [[IMSAI]] | year = 2001 | url = http://www.imsai.net/history/imsai_history/cp-m_history.htm | accessdate = 2013-06-03 }}&lt;/ref&gt;
&lt;ref name=&quot;Fraley_2007_Killian&quot;&gt;{{ cite web | title = Oral History of Joseph Killian, Interviewed by: Bob Fraley, Edited by: Dag Spicer, Recorded: January 26, 2007, Mountain View, California, CHM Reference number: X3879.2007, | first1 = Bob | last1 = Fraley | first2 = Dag | last2 = Spicer | date = 2007-01-26 | publisher = Computer History Museum | url = http://archive.computerhistory.org/resources/access/text/2012/10/102658016-05-01-acc.pdf | accessdate = 2013-06-03 }}&lt;/ref&gt;
&lt;ref name=&quot;hsw1&quot;&gt;[http://computer.howstuffworks.com/bios1.htm How StuffWorks: What BIOS Does].&lt;/ref&gt;
&lt;ref name=&quot;technical-ref-5-27&quot;&gt;page 5-27 ''IBM Personal Computer Hardware Reference Library Technical Reference'', 1984, publication number 6361459&lt;/ref&gt;
&lt;ref name=&quot;boot-spec-96&quot;&gt;[http://www.acpica.org/documentation/related_documents.php ''BIOS Boot Specification (Version 1.01, 11 January 1996)'']&lt;/ref&gt;
&lt;ref name=&quot;computing-basics-94&quot;&gt;[http://www.smartcomputing.com/editorial/article.asp?article=articles%2F1994%2Fjuly94%2Fpcn0713%2Fpcn0713.asp Smart Computing Article - What Is The BIOS?] - Computing Basics July 1994 • Vol.5 Issue 7&lt;/ref&gt;
&lt;ref name=&quot;CMOS Battery&quot;&gt;{{ cite web|last=Torres|first=Gabriel|title=Introduction and Lithium Battery|url=http://www.hardwaresecrets.com/article/81|work=Replacing the Motherboard Battery|publisher=hardwaresecrets.com|accessdate=June 20, 2013|date=24 November 2004}}&lt;/ref&gt;
&lt;ref name=&quot;Mueller-1&quot;&gt;{{ cite web|last=Mueller |first=Scott |url=http://www.informit.com/articles/article.aspx?p=130978&amp;seqNum=22 |title=Processor Update Feature &amp;#124; Microprocessor Types and Specifications |publisher=InformIT |date=2001-06-08 |accessdate=2014-04-15}}&lt;/ref&gt;
&lt;ref name=&quot;microcode-09&quot;&gt;{{ cite web|url=https://downloadcenter.intel.com/Detail_Desc.aspx?DwnldID=18148 |title=Linux* Processor Microcode Data File |work=Download Center |publisher=Downloadcenter.intel.com |date=2009-09-23 |accessdate=2014-04-15}}&lt;/ref&gt;
&lt;ref name=&quot;Mueller-2&quot;&gt;Scott Mueller, ''Upgrading and repairing PCs 15th edition'', Que Publishing, 2003 ISBN 0-7897-2974-1, pages 109-110&lt;/ref&gt;
&lt;ref name=&quot;smart-computing-97&quot;&gt;&quot;[http://www.smartcomputing.com/editorial/article.asp?article=articles%2F1997%2Fjun97%2F060997%2F060997.asp Decoding RAM &amp; ROM].&quot; ''[[Smart Computing]]''. June 1997. Volume 8, Issue 6.&lt;/ref&gt;
&lt;ref name=&quot;smart-computing-96&quot;&gt;&quot;[http://www.smartcomputing.com/editorial/article.asp?article=articles%2F1996%2Fmar96%2F96n0324%2F96n0324.asp Upgrading Your Flash BIOS For Plug And Play].&quot; ''[[Smart Computing]]''. March 1996. Volume 7, Issue 3.&lt;/ref&gt;
&lt;ref name=&quot;smart-somputing-99&quot;&gt;&quot;[http://www.smartcomputing.com/editorial/article.asp?article=articles/archive/g0704/41u6/41u6.asp&amp;guid= Time To Check BIOS].&quot; ''[[Smart Computing]]''. April 1999. Volume 7, Issue 4.&lt;/ref&gt;
&lt;ref name=&quot;geek-splashtop&quot;&gt;[http://www.geek.com/splashtops-instant-on-linux-desktop/ SplashTop's Instant-On Linux Desktop | Geek.com&lt;!-- Bot generated title --&gt;]&lt;/ref&gt;
&lt;ref name=&quot;Life and Times&quot;&gt;{{ cite web|last=Posted by Alex Watson, possibly repost from original content on custompc.com [unclear]|title=The life and times of the modern motherboard|url=http://www.bit-tech.net/custompc/features/601716/the-life-and-times-of-the-modern-motherboard/page1.html|work=2007-11-27|accessdate=2 February 2013}}&lt;/ref&gt;{{unreliable source|date=December 2014}}
&lt;ref name=&quot;Hilber&quot;&gt;{{ cite web|last=David Hilber, Jr.|title=Considerations for Designing an Embedded Intel Architecture System with System Memory Down ®|url=http://download.intel.com/embedded/processor/whitepaper/322506.pdf|publisher=[[Intel]]|accessdate=2 February 2013|date=August 2009}}&lt;/ref&gt;
&lt;ref name=&quot;AutoTU-1&quot;&gt;{{ cite web | last = Sacco | first = Anibal | author2 = Alfredo Ortéga | title =  Persistent BIOS Infection | work =  [[Exploiting Stuff]] | accessdate =  2010-02-06 | url =  http://exploiting.wordpress.com/2009/03/23/cansecwest-was-great-here-the-presentation-slides/ }}&lt;/ref&gt;
&lt;ref name=&quot;Fisher&quot;&gt;{{ cite web | last = Fisher | first = Dennis | title =  Researchers unveil persistent BIOS attack methods | work =  [[Threat Post]] | accessdate =  2010-02-06 | url =  http://threatpost.com/en_us/blogs/researchers-unveil-persistent-bios-attack-methods-031909 | archiveurl =  http://web.archive.org/web/20100130001722/http://threatpost.com/en_us/blogs/researchers-unveil-persistent-bios-attack-methods-031909| archivedate= 30 January 2010 &lt;!--DASHBot--&gt;| deadurl= no}}&lt;/ref&gt;
&lt;ref name=&quot;Giuliani&quot;&gt;{{ cite web | last = Giuliani | first = Marco | title =  Mebromi: the first BIOS rootkit in the wild | work =  [[blog]] | accessdate =  2011-09-19 | url =  http://blog.webroot.com/2011/09/13/mebromi-the-first-bios-rootkit-in-the-wild/ }}&lt;/ref&gt;
&lt;ref name=&quot;BMW&quot;&gt;{{ cite web | last =  | first =  | title =  360发布&quot;BMW病毒&quot;技术分析报告 | work =  [[blog]] | accessdate =  2011-09-19 | url =  http://bbs.360.cn/4005462/251096134.html }}&lt;/ref&gt;
&lt;ref name=&quot;Yuan&quot;&gt;{{ cite web | last = Yuan | first = Liang | title =  Trojan.Mebromi | work =  [[Threat Response]] | accessdate =  2011-09-19 | url =  http://www.symantec.com/security_response/writeup.jsp?docid=2011-090609-4557-99 }}&lt;/ref&gt;
&lt;ref name=&quot;cbs-news-60-minutes&quot;&gt;{{ cite web|url=http://www.cbsnews.com/news/how-did-60-minutes-get-cameras-into-a-spy-agency/ |title=How did 60 Minutes get cameras into a spy agency? |publisher=CBS News |date= |accessdate=2014-04-15}}&lt;/ref&gt;
&lt;ref name=&quot;Ackerman&quot;&gt;{{ cite web|author=Spencer Ackerman in Washington |url=http://www.theguardian.com/world/2013/dec/16/nsa-surveillance-60-minutes-cbs-facts |title=NSA goes on 60 Minutes: the definitive facts behind CBS's flawed report &amp;#124; World news |publisher=theguardian.com |date=2013-12-16 |accessdate=2014-01-27}}&lt;/ref&gt;
&lt;ref name=&quot;windows-gpt&quot;&gt;{{cite web|url=http://www.microsoft.com/whdc/device/storage/gpt_faq.mspx|title=Windows and GPT FAQ|publisher=Microsoft|work=microsoft.com|accessdate=6 December 2014}}&lt;/ref&gt;
&lt;ref name=&quot;intel-uefi&quot;&gt;{{cite web|url=http://www.intel.com/technology/efi/|title=Extensible Firmware Interface (EFI) and Unified EFI (UEFI)|work=Intel|accessdate=6 December 2014}}&lt;/ref&gt;
}}

== Further reading ==
* {{ cite book | title = IBM Personal Computer Technical Reference | publisher = [[IBM Corporation]] | edition = Revised | date = March 1983 &lt;!-- |id=6172234 NB. This is the IBM number of the German issue of the book &quot;IBM Personalcomputer Technisches Handbuch&quot;, also a revised edition from 1983, therefore left commented out for now. --&gt;}}
* {{ cite book | title = IBM Personal Computer AT Technical Reference | publisher = [[IBM Corporation]] | series = IBM Personal Computer Hardware Reference Library | edition = Revised | volume = 0, 1, 2 | date = March 1986 | origyear = 1984-03&lt;!-- 1984-03 is the date of the 1st single-volume edition. The later two-volume edition was first published in 1985-09, and revised in 1986-03. --&gt; | id = 1502494, 6139362, 6183310, 6183312, 6183355, 6280070, 6280099}}
* {{ cite book | title = System BIOS for IBM PC/XT/AT Computers and Compatibles&amp;nbsp;— The Complete Guide to ROM-Based System Software | author = Phoenix Technologies, Ltd. | authorlink = Phoenix Technologies | series = Phoenix Technical Reference Series | publisher = [[Addison Wesley Publishing Company]], Inc. | edition = 1st | origyear = 1987 | year = 1989 | isbn = 0-201-51806-6}}
* {{ cite book | title = CBIOS for IBM PS/2 Computers and Compatibles&amp;nbsp;— The Complete Guide to ROM-Based System Software for DOS | author = Phoenix Technologies, Ltd. | authorlink = Phoenix Technologies | series = Phoenix Technical Reference Series | publisher = [[Addison Wesley Publishing Company]], Inc. | edition = 1st | origyear = 1987 | year = 1989 | isbn = 0-201-51804-X}}
* {{ cite book | title = ABIOS for IBM PS/2 Computers and Compatibles&amp;nbsp;— The Complete Guide to ROM-Based System Software for OS/2 | author = Phoenix Technologies, Ltd. | authorlink = Phoenix Technologies | series = Phoenix Technical Reference Series | publisher = [[Addison Wesley Publishing Company]], Inc. | edition = 1st | origyear = 1987 | year = 1989 | isbn = 0-201-51805-8}}
* [http://bioshacking.blogspot.com/2012/02/bios-disassembly-ninjutsu-uncovered-1st.html BIOS Disassembly Ninjutsu Uncovered, 1st edition] (freely available book, PDF)

== External links ==
{{Commons category|Basic Input Output System|the BIOS}}
* [http://www.techarp.com/freebog.aspx? List of BIOS options]
* [http://computer.howstuffworks.com/bios.htm How BIOS Works]
* [http://www.phrack.com/archives/66/p66_0x07_Persistent%20BIOS%20infection_by_aLS%20and%20Alfredo.txt Persistent BIOS Infection - Phrack #66]
* [http://download.intel.com/design/flcomp/applnots/29219202.PDF Preventing BIOS Failures Using Intel Boot Block Flash Memory] (December 1998)
* [http://www.phoenix.com/resources/specs-bbs101.pdf BIOS Boot Specification] 1.01 (January 1996)
* [http://download.intel.com/design/flcomp/support/applnots/29216101.pdf Implementing a Plug and Play BIOS Using Intel's Boot Block Flash Memory] (February 1995)

[[Category:BIOS| ]]
[[Category:Boot loaders]]
[[Category:CP/M technology]]
[[Category:DOS technology]]</text>
