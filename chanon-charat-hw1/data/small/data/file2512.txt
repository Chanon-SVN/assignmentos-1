Binary tree
      <text xml:space="preserve">{{distinguish|B-tree}}
[[Image:binary tree.svg|right|192px|thumb|A labeled binary tree of size 9 and height 3, with a root node whose value is 2. The above tree is unbalanced and not sorted.]]

In [[computer science]], a '''binary tree''' is a [[tree structure|tree]] [[data structure]] in which each node has at most two [[child node|children]], which are referred to as the ''left'' child and the ''right'' child. A [[recursive definition]] using just [[set theory]] notions is that a (non-empty) binary tree is a [[tuple|triple]] (''L'', ''S'', ''R''), where ''L'' and ''R'' are binary trees or the [[empty set]] and ''S'' is a [[singleton set]].&lt;ref name=&quot;GarnierTaylor2009&quot;&gt;{{cite book|author1=Rowan Garnier|author2=John Taylor|title=Discrete Mathematics: Proofs, Structures and Applications, Third Edition|url=http://books.google.com/books?id=WnkZSSc4IkoC&amp;pg=PA620|year=2009|publisher=CRC Press|isbn=978-1-4398-1280-8|page=620}}&lt;/ref&gt; Some authors allow the binary tree to be the empty set as well.&lt;ref name=&quot;Skiena2009&quot;&gt;{{cite book|author=Steven S Skiena|title=The Algorithm Design Manual|url=http://books.google.com/books?id=7XUSn0IKQEgC&amp;pg=PA77|year=2009|publisher=Springer Science &amp; Business Media|isbn=978-1-84800-070-4|page=77}}&lt;/ref&gt;

From a [[graph theory]] perspective, binary (and K-ary) trees as defined here are actually [[Arborescence (graph theory)|arborescence]]s.&lt;ref name=&quot;Knuth1997&quot;&gt;{{cite book|author=Knuth|title=The Art Of Computer Programming, Volume 1, 3/E|year=1997|publisher=Pearson Education|isbn=0-201-89683-4|page=363}}&lt;/ref&gt; A binary tree may thus be also called a '''bifurcating arborescence'''&lt;ref name=&quot;Knuth1997&quot;/&gt;—a term which actually appears in some very old programming books,&lt;ref name=&quot;Flores1971&quot;&gt;{{cite book|author=Iván Flores|title=Computer programming system/360|year=1971|publisher=Prentice-Hall|page=39}}&lt;/ref&gt; before the modern computer science terminology prevailed. It is also possible to interpret a binary tree as an [[undirected graph|undirected]], rather than a [[directed graph]], in which case a binary tree is an [[ordered tree|ordered]], [[rooted tree]].&lt;ref&gt;{{cite book|author=Kenneth Rosen|title=Discrete Mathematics and Its Applications, 7th edition|year=2011|publisher=McGraw-Hill Science|page=749|isbn=978-0-07-338309-5}}&lt;/ref&gt; Some authors use '''rooted binary tree''' instead of ''binary tree'' to emphasize the fact that the tree is rooted, but as defined above, a binary tree is always rooted.&lt;ref name=&quot;Mazur2010&quot;&gt;{{cite book|author=David R. Mazur|title=Combinatorics: A Guided Tour|url=http://books.google.com/books?id=yI4Jx5Obr08C&amp;pg=PA246|year=2010|publisher=Mathematical Association of America|isbn=978-0-88385-762-5|page=246}}&lt;/ref&gt; A binary tree is a special case of an ordered [[K-ary tree]], where ''k'' is 2. There is however a subtle difference between the binary tree data structure as defined here and the notions from graph theory or as K-ary tree is usually defined. As defined here, a binary tree node having a left child but no right child is not the same as a node having a right child but no left child, whereas an ordered/plane tree (or arborescence) from graph theory cannot tell these cases apart, and neither does ''k''-ary as usually understood as using a list of children.&lt;ref name=&quot;Aho1983&quot;&gt;{{cite book|author1=[[Alfred V. Aho]]|author2=[[John E. Hopcroft]]|author3=[[Jeffrey D. Ullman]]|title=Data Structures and Algorithms|year=1983|publisher=Pearson Education|isbn=978-81-7758-826-2|at=section 3.4: &quot;Binary trees&quot;}}&lt;/ref&gt; An actual generalization of binary tree would have to discern for example a case like having a first and third, but no second child; the [[trie]] data structure is actually the more appropriate generalization in this respect.&lt;ref name=&quot;Storer2001&quot;&gt;{{cite book|author=J.A. Storer|title=An Introduction to Data Structures and Algorithms|year=2002|publisher=Springer Science &amp; Business Media|isbn=978-1-4612-6601-3|page=127}}&lt;/ref&gt;

In computing, binary trees are seldom used solely for their structure. Much more typical is to define a labeling function on the nodes, which associates some value to each node.&lt;ref name=&quot;Makinson2009b&quot;&gt;{{cite book|author=David Makinson|title=Sets, Logic and Maths for Computing|year=2009|publisher=Springer Science &amp; Business Media|isbn=978-1-84628-845-6|page=199}}&lt;/ref&gt; Binary trees labelled this way are used to implement [[binary search tree]]s and [[binary heap]]s, and are used for efficient [[search algorithm|searching]] and [[Sorting algorithm|sorting]]. The designation of non-root nodes as left or right child even when there is only one child present matters in some of these applications, in particular it is significant in binary search trees.&lt;ref name=&quot;Gross2007&quot;&gt;{{cite book|author=Jonathan L. Gross|title=Combinatorial Methods with Computer Applications|url=http://books.google.com/books?id=hamtabmh0ZoC&amp;pg=PA248|year=2007|publisher=CRC Press|isbn=978-1-58488-743-0|page=248}}&lt;/ref&gt; In mathematics, what is termed ''binary tree'' can vary significantly from author to author. Some use the definition commonly used computer science,&lt;ref name=&quot;oem&quot;/&gt; but others define it as every non-leaf having exactly two children and don't necessarily order (as left/right) the children either.&lt;ref name=&quot;Foulds1992&quot;&gt;{{cite book|author=L.R. Foulds|title=Graph Theory Applications|url=http://books.google.com/books?id=IK7kreGl3vkC&amp;pg=PA32|year=1992|publisher=Springer Science &amp; Business Media|isbn=978-0-387-97599-3|page=32}}&lt;/ref&gt;

==Definitions==

===Recursive definition===
{{cleanup-rewrite|section|date=July 2014}}
Another way of defining a ''full'' binary tree is a [[recursive definition]]. A full binary tree is either:&lt;ref name=&quot;Rosen2011&quot;&gt;{{cite book|author=Kenneth Rosen|title=Discrete Mathematics and Its Applications 7th edition|year=2011|publisher=McGraw-Hill Science|pages=352–353|isbn=978-0-07-338309-5}}&lt;/ref&gt;
* A single vertex.
* A graph formed by taking two (full) binary trees, adding a vertex, and adding an edge directed from the new vertex to the root of each binary tree.
This also does not establish the order of children, but does fix a specific root node.

To actually define a binary tree in general, we must allow for the possibility that only one of children may be empty. An artifact, which in some textbooks is called an ''extended binary tree'' is needed for that purpose. An extended binary tree is thus recursively defined as:&lt;ref name=&quot;Rosen2011&quot;/&gt;
* the [[empty set]] is an extended binary tree
* if T&lt;sub&gt;1&lt;/sub&gt; and T&lt;sub&gt;2&lt;/sub&gt; are extended binary trees, then denote by T&lt;sub&gt;1&lt;/sub&gt; • T&lt;sub&gt;2&lt;/sub&gt; the extended binary tree obtained by adding a root ''r'' connected to the left to T&lt;sub&gt;1&lt;/sub&gt; and to the right to T&lt;sub&gt;2&lt;/sub&gt; by adding edges when these sub-trees are non-empty.

Another way of imagining this construction (and understanding the terminology) is to consider instead of the empty set a different type of node—for instance square nodes if the regular ones are circles.&lt;ref name=&quot;HuShing2002&quot;&gt;{{cite book|author1=Te Chiang Hu|author2=Man-tak Shing|title=Combinatorial Algorithms|year=2002|publisher=Courier Dover Publications|isbn=978-0-486-41962-6|page=162}}&lt;/ref&gt;

===Using graph theory concepts===
A binary tree is a [[rooted tree]] that is also an [[ordered tree]] (aka [[plane tree]]) in which every node has at most two children. A rooted tree naturally imparts a notion of levels (distance from the root), thus for every node a notion of children may be defined as the nodes connected to it a level below. Ordering of these children (e.g. by drawing them on a plane) makes possible to distinguish left child from right child.&lt;ref name=&quot;HsuLin2008&quot;&gt;{{cite book|author1=Lih-Hsing Hsu|author2=Cheng-Kuan Lin|title=Graph Theory and Interconnection Networks|url=http://books.google.com/books?id=vbxdqhDKOSYC&amp;pg=PA66|year=2008|publisher=CRC Press|isbn=978-1-4200-4482-9|page=66}}&lt;/ref&gt; But this still doesn't distinguish between a node with left but not a right child from a one with right but no left child.

The necessary distinction can be made by first partitioning the edges, i.e. defining the binary tree as triplet (V, E&lt;sub&gt;1&lt;/sub&gt;, E&lt;sub&gt;2&lt;/sub&gt;), where (V, E&lt;sub&gt;1&lt;/sub&gt; ∪ E&lt;sub&gt;2&lt;/sub&gt;) is a rooted tree (equivalently arborescence) and E&lt;sub&gt;1&lt;/sub&gt; ∩ E&lt;sub&gt;2&lt;/sub&gt; is empty, and also requiring that for all ''j'' ∈ { 1, 2 } every node has at most one E&lt;sub&gt;''j''&lt;/sub&gt; child.&lt;ref name=&quot;FlumGrohe2006&quot;&gt;{{cite book|author1=J. Flum|author2=M. Grohe|title=Parameterized Complexity Theory|year=2006|publisher=Springer|isbn=978-3-540-29953-0|page=245}}&lt;/ref&gt; A more informal way of making the distinction is to say, quoting the [[Encyclopedia of Mathematics]], that &quot;every node has a left child, a right child, neither, or both&quot; and to specify that these &quot;are all different&quot; binary trees.&lt;ref name=&quot;oem&quot;&gt;{{SpringerEOM|id=Binary_tree&amp;oldid=31607|title=Binary tree}} also in print as {{cite book|author=Michiel Hazewinkel|title=Encyclopaedia of Mathematics. Supplement I|url=http://books.google.com/books?id=3ndQH4mTzWQC&amp;pg=PA124|year=1997|publisher=Springer Science &amp; Business Media|isbn=978-0-7923-4709-5|page=124}}&lt;/ref&gt;

==Types of binary trees==
Note that the terminology is by no means standardized in the literature.
* A '''rooted''' binary [[tree data structure|tree]] has a [[root node]] and every node has at most two children.
* In a '''full''' binary tree or '''proper''' binary tree &lt;ref&gt;{{cite web|url=http://xlinux.nist.gov/dads//HTML/fullBinaryTree.html | title=full binary tree | publisher = [[NIST]]}}&lt;/ref&gt; every node other than the leaves has two children. Physicists define a ''binary tree'' to mean a ''full binary tree''.&lt;ref&gt;''Unitary Symmetry'', James D. Louck, World Scientific Pub., 2008&lt;/ref&gt; [[File:Waldburg Ahnentafel.jpg|thumb|An [[ancestry chart]] which maps to a perfect depth-4 binary tree]]. A ''full tree'' is sometimes ambiguously defined as a ''perfect tree'' (see next).
* A '''{{visible anchor|perfect}}''' binary tree is a ''full binary tree'' in which all ''leaves'' have the same ''depth'' or same ''level''.&lt;ref&gt;{{cite web|url=http://www.nist.gov/dads/HTML/perfectBinaryTree.html|title=perfect binary tree | publisher = [[NIST]]}}&lt;/ref&gt; (This is ambiguously also called a ''complete binary tree'' (see next).) An example of a perfect binary tree is the [[ancestry chart]] of a person to a given depth, as each person has exactly two biological parents (one mother and one father); note that this reverses the usual parent/child tree convention, and these trees go in the opposite direction from usual (root at bottom).
* In a '''{{visible anchor|complete}}''' binary tree every level, ''except possibly the last'', is completely filled, and all nodes are as far left as possible. It can have between 1 and 2&lt;sup&gt;''h''&lt;/sup&gt; nodes, as far left as possible, at the last level h.&lt;ref name=&quot;complete binary tree&quot;&gt;{{cite web|url=http://www.nist.gov/dads/HTML/completeBinaryTree.html|title=complete binary tree| publisher = NIST}}&lt;/ref&gt; A binary tree is called an almost complete binary tree or nearly complete binary tree if mentioned exception holds, i.e. the last level is not completely filled. This type of binary tree is used as a specialized data structure called a [[Binary heap]].&lt;ref name=&quot;complete binary tree&quot;/&gt;
* An '''infinite complete''' binary tree has [[countably infinite]] number of levels, in which every node has two children, so that there are 2&lt;sup&gt;''d''&lt;/sup&gt; nodes at level ''d''. The set of all nodes is countably infinite, but the set of all infinite paths from the root is uncountable, having the [[cardinality of the continuum]]. These paths correspond by an order-preserving [[bijection]] to the points of the [[Cantor set]], or (using the example of a [[Stern–Brocot tree]]) to the set of positive [[irrational number]]s.
* A '''balanced''' binary tree has the minimum possible [[Binary_tree#Properties_of_binary_trees|maximum height]] (a.k.a. depth) for the leaf nodes, because for any given number of leaf nodes the leaf nodes are placed at the greatest height possible.

&lt;tt&gt;
: '''h'''&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;'''Balanced'''&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;'''Unbalanced, h = (n + 1)/2'''
: 1:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ABCDE&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ABCDE
: &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\
: 2:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ABCD&amp;nbsp;&amp;nbsp;&amp;nbsp;E&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ABCD&amp;nbsp;&amp;nbsp;&amp;nbsp;E
: &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\
: 3:&amp;nbsp;&amp;nbsp;AB&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;CD&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ABC&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;D
: &amp;nbsp;&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp;\&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp;\&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp;&amp;nbsp;\
: 4:&amp;nbsp;A&amp;nbsp;&amp;nbsp;B&amp;nbsp;&amp;nbsp;C&amp;nbsp;&amp;nbsp;D&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;AB&amp;nbsp;&amp;nbsp;&amp;nbsp;C
: &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp;\
: 5:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;A&amp;nbsp;&amp;nbsp;&amp;nbsp;B
&lt;/tt&gt;

: Perfect, complete, and Merkle&lt;ref&gt;[https://bitcoin.org/en/developer-guide#term-merkle-tree Bitcoin Developer Guide: Merkle tree]&lt;/ref&gt; binary trees are examples of balanced binary trees. A commonly mentioned structure which is balanced is the left and right subtrees of every node differ by 1 or less,&lt;ref&gt;Aaron M. Tenenbaum, et al. Data Structures Using C, Prentice Hall, 1990 ISBN 0-13-199746-7&lt;/ref&gt; although in general it is a binary tree where no leaf is much farther away from the root than any other leaf. (Different balancing schemes allow different definitions of &quot;much farther&quot;.&lt;ref&gt;Paul E. Black (ed.), entry for ''data structure'' in ''[[Dictionary of Algorithms and Data Structures]]. U.S. [[National Institute of Standards and Technology]]. 15 December 2004. [http://xw2k.nist.gov/dads//HTML/balancedtree.html Online version] Accessed 2010-12-19.&lt;/ref&gt;)
* A '''degenerate''' (or '''pathological''') tree is where each parent node has only one associated child node. This means that performance-wise, the tree will behave like a [[linked list]] data structure.

Note that this terminology often varies in the literature, especially with respect to the meaning of &quot;complete&quot; and &quot;full&quot;.

==Properties of binary trees==
* The number of nodes &lt;math&gt;n&lt;/math&gt; in a full binary tree, is at least &lt;math&gt;n = 2h - 1&lt;/math&gt; and at most &lt;math&gt;n = 2^{h} - 1&lt;/math&gt;, where &lt;math&gt;h&lt;/math&gt; is the height of the tree. A tree consisting of only a root node has a height of 1.
* The number of leaf nodes &lt;math&gt;l&lt;/math&gt; in a full binary tree, is &lt;math&gt;l = (n + 1) / 2&lt;/math&gt; because the number of non-leaf (a.k.a. internal) nodes &lt;math&gt;n - l = \sum_{k=0}^{log_2(l)-1} 2^k = 2^{log_2(l)} - 1 = l - 1&lt;/math&gt;.
* This means that a binary tree with &lt;math&gt;l&lt;/math&gt; leaves has &lt;math&gt;n = 2l - 1&lt;/math&gt; nodes.
* In a '''balanced''' full binary tree, &lt;math&gt;h = \lceil log_2(l)\rceil + 1 = \lceil log_2((n + 1) / 2)\rceil + 1 = \lceil log_2(n + 1)\rceil&lt;/math&gt; (see [[Floor and ceiling functions|ceiling function]]).
* In a '''perfect''' full binary tree, &lt;math&gt;l = 2^{h}&lt;/math&gt; thus &lt;math&gt;n = 2^{h+1} - 1&lt;/math&gt;.
* The maximum possible number of null links (i.e., absent children of the nodes) in a '''complete''' binary tree of ''n'' nodes is (''n''+1), where only 1 node exists in bottom-most level to the far left.
* The number of internal nodes in a '''complete''' binary tree of ''n'' nodes is &amp;lfloor; ''n''/2 &amp;rfloor;.
* For any non-empty binary tree with ''n''&lt;sub&gt;0&lt;/sub&gt; leaf nodes and ''n''&lt;sub&gt;2&lt;/sub&gt; nodes of degree 2, ''n''&lt;sub&gt;0&lt;/sub&gt; = ''n''&lt;sub&gt;2&lt;/sub&gt; + 1.&lt;ref&gt;{{cite book | last=Mehta | first=Dinesh |author2=[[Sartaj Sahni]] | title=Handbook of Data Structures and Applications|publisher=[[Chapman and Hall]]|isbn = 1-58488-435-5|year=2004 }}&lt;/ref&gt;

==Combinatorics==
{{unreferenced section|date=July 2014}}
In combinatorics one considers the problem of counting the number of full binary trees of a given size.  Here the trees have no values attached to their nodes (this would just multiply the number of possible trees by an easily determined factor), and trees are distinguished only by their structure; however the left and right child of any node are distinguished (if they are different trees, then interchanging them will produce a tree distinct from the original one). The size of the tree is taken to be the number ''n'' of internal nodes (those with two children); the other nodes are leaf nodes and there are {{nowrap|''n'' + 1}} of them. The number of such binary trees of size ''n'' is equal to the number of ways of fully parenthesizing a string of {{nowrap|''n'' + 1}} symbols (representing leaves) separated by ''n'' binary operators (representing internal nodes), so as to determine the argument subexpressions of each operator. For instance for {{nowrap|''n'' {{=}} 3}} one has to parenthesize a string like {{nowrap| &lt;math&gt;X*X*X*X&lt;/math&gt;}}, which is possible in five ways:
: &lt;math&gt;((X*X)*X)*X,\qquad (X*(X*X))*X,\qquad (X*X)*(X*X),\qquad X*((X*X)*X),\qquad X*(X*(X*X)).&lt;/math&gt;
The correspondence to binary trees should be obvious, and the addition of redundant parentheses (around an already parenthesized expression or around the full expression) is disallowed (or at least not counted as producing a new possibility).

There is a unique binary tree of size 0 (consisting of a single leaf), and any other binary tree is characterized by the pair of its left and right children; if these have sizes ''i'' and ''j'' respectively, the full tree has size {{nowrap|''i'' + ''j'' + 1}}. Therefore the number &lt;math&gt;C_n&lt;/math&gt; of binary trees of size ''n'' has the following recursive description &lt;math&gt;C_0=1&lt;/math&gt;, and &lt;math&gt;\textstyle C_n=\sum_{i=0}^{n-1}C_iC_{n-1-i}&lt;/math&gt; for any positive integer ''n''. It follows that &lt;math&gt;C_n&lt;/math&gt; is the [[Catalan number]] of index ''n''.

The above parenthesized strings should not be confused with the set of words of length 2''n'' in the [[Dyck language]], which consist only of parentheses in such a way that they are properly balanced. The number of such strings satisfies the same recursive description (each Dyck word of length 2''n'' is determined by the Dyck subword enclosed by the initial '(' and its matching ')' together with the Dyck subword remaining after that closing parenthesis, whose lengths 2''i'' and 2''j'' satisfy {{nowrap|''i'' + ''j'' + 1 {{=}} ''n''}}); this number is therefore also the Catalan number &lt;math&gt;C_n&lt;/math&gt;. So there are also five Dyck words of length 10:
: &lt;math&gt;()()(),\qquad ()(()),\qquad (())(),\qquad (()()),\qquad ((()))&lt;/math&gt;.
These Dyck words do not correspond in an obvious way to binary trees. A bijective correspondence can nevertheless be defined as follows: enclose the Dyck word in an extra pair of parentheses, so that the result can be interpreted as a  [[Lisp (programming language)|Lisp]] list expression (with the empty list () as only occurring atom); then the [[Lisp (programming language)#S-expressions represent lists|dotted-pair]] expression for that proper list is a fully parenthesized expression (with NIL as symbol and '.' as operator) describing the corresponding binary tree (which is in fact the internal representation of the proper list).

The ability to represent binary trees as strings of symbols and parentheses implies that binary trees can represent the elements of a [[free magma]] on a singleton set.

== Methods for storing binary trees ==&lt;!-- This section is linked from [[Ahnentafel]] --&gt;
Binary trees can be constructed from [[programming language]] primitives in several ways.

=== Nodes and references ===

In a language with [[record (computer science)|records]] and [[reference (computer science)|reference]]s, binary trees are typically constructed by having a tree node structure which contains some data and references to its left child and its right child. Sometimes it also contains a reference to its unique parent. If a node has fewer than two children, some of the child pointers may be set to a special null value, or to a special [[sentinel node]].

This method of storing binary trees wastes a fair bit of memory, as the pointers will be null (or point to the sentinel) more than half the time; a more conservative representation alternative is [[threaded binary tree]].&lt;ref name=&quot;Samanta2004&quot;&gt;{{cite book|author=D. Samanta|title=Classic Data Structures|year=2004|publisher=PHI Learning Pvt. Ltd.|isbn=978-81-203-1874-8|pages=264–265}}&lt;/ref&gt;

In languages with [[tagged union]]s such as [[ML (programming language)|ML]], a tree node is often a tagged union of two types of nodes, one of which is a 3-tuple of data, left child, and right child, and the other of which is a &quot;leaf&quot; node, which contains no data and functions much like the null value in a language with pointers. For example the following line of code in [[OCaml]] (an ML dialect) defines a binary tree that stores a character in each node.&lt;ref name=&quot;Scott2009&quot;&gt;{{cite book|author=Michael L. Scott|title=Programming Language Pragmatics|year=2009|publisher=Morgan Kaufmann|isbn=978-0-08-092299-7|page=347|edition=3rd}}&lt;/ref&gt;

&lt;!-- the source gives the example in Standard ML, which has &quot;datatype&quot; instead of &quot;type&quot;, but wikipedia's source tag doesn't support Standard ML. --&gt;
&lt;source lang=&quot;ocaml&quot;&gt;
type chr_tree = Empty | Node of char * chr_tree * chr_tree
&lt;/source&gt;

===Arrays===

Binary trees can also be stored in breadth-first order as an [[implicit data structure]] in [[array data structure|array]]s, and if the tree is a complete binary tree, this method wastes no space. In this compact arrangement, if a node has an index ''i'', its children are found at indices &lt;math&gt;2i + 1&lt;/math&gt; (for the left child) and &lt;math&gt;2i +2&lt;/math&gt; (for the right), while its parent (if any) is found at index ''&lt;math&gt;\left \lfloor \frac{i-1}{2} \right \rfloor&lt;/math&gt;'' (assuming the root has index zero). This method benefits from more compact storage and better [[locality of reference]], particularly during a preorder traversal. However, it is expensive to grow and wastes space proportional to 2&lt;sup&gt;''h''&lt;/sup&gt; - ''n'' for a tree of depth ''h'' with ''n'' nodes.

This method of storage is often used for [[binary heap]]s. No space is wasted because nodes are added in breadth-first order.

&lt;center&gt;[[Image:Binary tree in array.svg|300px|A small complete binary tree stored in an array]]&lt;/center&gt;

== Encodings ==

=== Succinct encodings ===
A [[succinct data structure]] is one which occupies close to minimum possible space, as established by [[information theory|information theoretical]] lower bounds. The number of different binary trees on &lt;math&gt;n&lt;/math&gt; nodes is &lt;math&gt;\mathrm{C}_{n}&lt;/math&gt;, the &lt;math&gt;n&lt;/math&gt;th [[Catalan number]] (assuming we view trees with identical ''structure'' as identical). For large &lt;math&gt;n&lt;/math&gt;, this is about &lt;math&gt;4^{n}&lt;/math&gt;; thus we need at least about &lt;math&gt;\log_{2}4^{n} = 2n&lt;/math&gt; bits to encode it. A succinct binary tree therefore would occupy &lt;math&gt;2n+o(n)&lt;/math&gt; bits.

One simple representation which meets this bound is to visit the nodes of the tree in preorder, outputting &quot;1&quot; for an internal node and &quot;0&quot; for a leaf. [http://theory.csail.mit.edu/classes/6.897/spring03/scribe_notes/L12/lecture12.pdf] If the tree contains data, we can simply simultaneously store it in a consecutive array in preorder. This function accomplishes this:

 '''function''' EncodeSuccinct(''node'' n, ''bitstring'' structure, ''array'' data) {
     '''if''' n = ''nil'' '''then'''
         append 0 to structure;
     '''else'''
         append 1 to structure;
         append n.data to data;
         EncodeSuccinct(n.left, structure, data);
         EncodeSuccinct(n.right, structure, data);
 }

The string ''structure'' has only &lt;math&gt;2n + 1&lt;/math&gt; bits in the end, where &lt;math&gt;n&lt;/math&gt; is the number of (internal) nodes; we don't even have to store its length. To show that no information is lost, we can convert the output back to the original tree like this:

 '''function''' DecodeSuccinct(''bitstring'' structure, ''array'' data) {
     remove first bit of ''structure'' and put it in ''b''
     '''if''' b = 1 '''then'''
         create a new node ''n''
         remove first element of data and put it in n.data
         n.left = DecodeSuccinct(structure, data)
         n.right = DecodeSuccinct(structure, data)
         '''return''' n
     '''else'''
         '''return''' nil
 }

More sophisticated succinct representations allow not only compact storage of trees but even useful operations on those trees directly while they're still in their succinct form.

=== Encoding general trees as binary trees ===
There is a one-to-one mapping between general ordered trees and binary trees, which in particular is used by [[Lisp (programming language)|Lisp]] to represent general ordered trees as binary trees. To convert a general ordered tree to binary tree, we only need to represent the general tree in left child-right sibling way. The result of this representation will be automatically binary tree, if viewed from a different perspective. Each node ''N'' in the ordered tree corresponds to a node ''N' '' in the binary tree; the ''left'' child of ''N' '' is the node corresponding to the first child of ''N'', and the ''right'' child of ''N' '' is the node corresponding to ''N'' 's next sibling --- that is, the next node in order among the children of the parent of ''N''. This binary tree representation of a general order tree is sometimes also referred to as a [[left child-right sibling binary tree]] (LCRS tree), or a [[doubly chained tree]], or a [[Filial-Heir chain]].

One way of thinking about this is that each node's children are in a [[linked list]], chained together with their ''right'' fields, and the node only has a pointer to the beginning or head of this list, through its ''left'' field.

For example, in the tree on the left, A has the 6 children {B,C,D,E,F,G}.  It can be converted into the binary tree on the right.

&lt;center&gt;
[[Image:N-ary to binary.svg|400x240px|An example of converting an n-ary tree to a binary tree]]
&lt;/center&gt;

The binary tree can be thought of as the original tree tilted sideways, with the black left edges representing ''first child'' and the blue right edges representing ''next sibling''.  The leaves of the tree on the left would be written in Lisp as:

:(((N O) I J) C D ((P) (Q)) F (M))

which would be implemented in memory as the binary tree on the right, without any letters on those nodes that have a left child.

== Common operations ==
{{original research|section|date=July 2014}}
[[File:BinaryTreeRotations.svg|thumb|300px|[[Tree rotation]]s are very common internal operations on [[Self-balancing binary search tree|self-balancing binary trees]].]]
There are a variety of different operations that can be performed on binary trees. Some are [[mutator method|mutator]] operations, while others simply return useful information about the tree.

=== Insertion ===
Nodes can be inserted into binary trees in between two other nodes or added after a [[leaf node]]. In binary trees, a node that is inserted is specified as to which child it is.

==== External nodes ====
Suppose that the external node being added onto is node A. To add a new node after node A, A assigns the new node as one of its children and the new node assigns node A as its parent.

==== Internal nodes ====
[[File:Insertion of binary tree node.svg|thumb|360px|The process of inserting a node into a binary tree]] 
Insertion on [[internal node]]s is slightly more complex than on external nodes. Say that the internal node is node A and that node B is the child of A. (If the insertion is to insert a right child, then B is the right child of A, and similarly with a left child insertion.) A assigns its child to the new node and the new node assigns its parent to A. Then the new node assigns its child to B and B assigns its parent as the new node.

=== Deletion ===
Deletion is the process whereby a node is removed from the tree. Only certain nodes in a binary tree can be removed unambiguously.&lt;ref name=&quot;rice&quot;&gt;{{cite web |url=http://www.clear.rice.edu/comp212/03-spring/lectures/22/|title=Binary Tree Structure|author=Dung X. Nguyen|year=2003|work= |publisher=rice.edu|accessdate=December 28, 2010}} 
&lt;/ref&gt;

==== Node with zero or one children ====
[[File:Deletion of internal binary tree node.svg|thumb|360px|The process of deleting an internal node in a binary tree]] 
Suppose that the node to delete is node A. If a node has no children ([[external node]]), deletion is accomplished by setting the child of A's parent to [[null pointer|null]]. If it has one child, set the parent of A's child to A's parent and set the child of A's parent to A's child.

==== Node with two children ====
In a binary tree, a node with two children cannot be deleted unambiguously.&lt;ref name=&quot;rice&quot;/&gt; However, in certain binary trees (including [[binary search tree]]s) these nodes ''can'' be deleted, though with a rearrangement of the tree structure.

=== Traversal ===
{{Main|Tree traversal}}

Pre-order, in-order, and post-order traversal visit each node in a tree by recursively visiting each node in the left and right subtrees of the root.

==== Depth-first order ====
In depth-first order, we always attempt to visit the node farthest from the root node that we can, but with the caveat that it must be a child of a node we have already visited. Unlike a depth-first search on graphs, there is no need to remember all the nodes we have visited, because a tree cannot contain cycles. Pre-order is a special case of this. See [[depth-first search]] for more information.

==== Breadth-first order ====
Contrasting with depth-first order is breadth-first order, which always attempts to visit the node closest to the root that it has not already visited. See [[breadth-first search]] for more information. Also called a ''level-order traversal''.

In a complete binary tree, a node's breadth-index (''i - (2&lt;sup&gt;d&lt;/sup&gt; - 1)'') can be used as traversal instructions from the root. Reading bitwise from left to right, starting at bit ''d - 1'', where ''d'' is the node's distance from the root (''d = floor(log2(i+1))'') and the node in question is not the root itself (''d &gt; 0''). When the breadth-index is masked at bit ''d - 1'', the bit values &lt;tt&gt;0&lt;/tt&gt; and &lt;tt&gt;1&lt;/tt&gt; mean to step either left or right, respectively. The process continues by successively checking the next bit to the right until there are no more. The rightmost bit indicates the final traversal from the desired node's parent to the node itself. There is a time-space trade-off between iterating a complete binary tree this way versus each node having pointer/s to its sibling/s.

==See also==
{{columns-list|colwidth=30em|
* [[2-3 tree]]
* [[2-3-4 tree]]
* [[AA tree]]
* [[Ahnentafel]]
* [[AVL tree]]
* [[B-tree]]
* [[Binary space partitioning]]
* [[Huffman tree]]
* [[K-ary tree]]
* [[Kraft's inequality]]
* [[Optimal binary search tree]]
* [[Random binary tree]]
* [[Recursion (computer science)]]
* [[Red-black tree]]
* [[Rope (computer science)]]
* [[Self-balancing binary search tree]]
* [[Splay tree]]
* [[Strahler number]]
* [[Tree of primitive Pythagorean triples#Alternative methods of generating the tree]]
* [[Unrooted binary tree]]
}}

== References ==

=== Citations ===
{{Reflist|33em}}

=== Bibliography ===
* [[Donald Knuth]]. ''The art of computer programming vol 1. Fundamental Algorithms'', Third Edition. Addison-Wesley, 1997. ISBN 0-201-89683-4. Section 2.3, especially subsections 2.3.1&amp;ndash;2.3.2 (pp.&amp;nbsp;318&amp;ndash;348).

==External links==
{{commons category|Binary trees}}
* [http://www.findstat.org/BinaryTrees binary trees] entry in the [http://www.findstat.org/ FindStat] database
*[http://www.gamedev.net/page/resources/_/technical/general-programming/trees-part-2-binary-trees-r1433 Gamedev.net introduction on binary trees]
*[http://www.brpreiss.com/books/opus4/html/page355.html Binary Tree Proof by Induction]
*[http://piergiu.wordpress.com/2010/02/21/balanced-binary-search-tree-on-array/ Balanced binary search tree on array How to create bottom-up an Ahnentafel list, or a balanced binary search tree on array]

{{CS-Trees}}

{{DEFAULTSORT:Binary Tree}}
[[Category:Binary trees| ]]
[[Category:Data structures]]</text>
